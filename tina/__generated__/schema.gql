# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  setting(relativePath: String): Setting!
  settingConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SettingFilter): SettingConnection!
  navigation(relativePath: String): Navigation!
  navigationConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: NavigationFilter): NavigationConnection!
  home(relativePath: String): Home!
  homeConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: HomeFilter): HomeConnection!
  projects(relativePath: String): Projects!
  projectsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ProjectsFilter): ProjectsConnection!
}

input DocumentFilter {
  setting: SettingFilter
  navigation: NavigationFilter
  home: HomeFilter
  projects: ProjectsFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Setting | Navigation | Home | Projects | Folder

type SettingSiteSettings {
  siteName: String
  siteOwner: String
}

type SettingPreloader {
  image: String
  alt: String
}

type SettingCompanyLogo {
  image: String
  alt: String
}

type SettingSocialFb {
  title: String
  link: String
}

type SettingSocialIg {
  title: String
  link: String
}

type SettingSocialGithub {
  title: String
  link: String
}

type SettingSocialLinkedin {
  title: String
  link: String
}

type SettingSocial {
  fb: SettingSocialFb
  ig: SettingSocialIg
  github: SettingSocialGithub
  linkedin: SettingSocialLinkedin
}

type Setting implements Node & Document {
  siteSettings: SettingSiteSettings
  preloader: SettingPreloader
  companyLogo: SettingCompanyLogo
  social: SettingSocial
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input SettingSiteSettingsFilter {
  siteName: StringFilter
  siteOwner: StringFilter
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input SettingPreloaderFilter {
  image: ImageFilter
  alt: StringFilter
}

input SettingCompanyLogoFilter {
  image: ImageFilter
  alt: StringFilter
}

input SettingSocialFbFilter {
  title: StringFilter
  link: StringFilter
}

input SettingSocialIgFilter {
  title: StringFilter
  link: StringFilter
}

input SettingSocialGithubFilter {
  title: StringFilter
  link: StringFilter
}

input SettingSocialLinkedinFilter {
  title: StringFilter
  link: StringFilter
}

input SettingSocialFilter {
  fb: SettingSocialFbFilter
  ig: SettingSocialIgFilter
  github: SettingSocialGithubFilter
  linkedin: SettingSocialLinkedinFilter
}

input SettingFilter {
  siteSettings: SettingSiteSettingsFilter
  preloader: SettingPreloaderFilter
  companyLogo: SettingCompanyLogoFilter
  social: SettingSocialFilter
}

type SettingConnectionEdges {
  cursor: String!
  node: Setting
}

type SettingConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SettingConnectionEdges]
}

type NavigationNavigationLinksHeading {
  mainText: String
  subText: String
}

type NavigationNavigationLinks {
  link: String
  heading: NavigationNavigationLinksHeading
  text: String
}

type NavigationFooterLinks {
  text: String
  url: String
}

type NavigationFooterText {
  text1: String
  text2: String
}

type Navigation implements Node & Document {
  navigationLinks: [NavigationNavigationLinks]
  footerLinks: [NavigationFooterLinks]
  footerText: [NavigationFooterText]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input NavigationNavigationLinksHeadingFilter {
  mainText: StringFilter
  subText: StringFilter
}

input NavigationNavigationLinksFilter {
  link: StringFilter
  heading: NavigationNavigationLinksHeadingFilter
  text: StringFilter
}

input NavigationFooterLinksFilter {
  text: StringFilter
  url: StringFilter
}

input NavigationFooterTextFilter {
  text1: StringFilter
  text2: StringFilter
}

input NavigationFilter {
  navigationLinks: NavigationNavigationLinksFilter
  footerLinks: NavigationFooterLinksFilter
  footerText: NavigationFooterTextFilter
}

type NavigationConnectionEdges {
  cursor: String!
  node: Navigation
}

type NavigationConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [NavigationConnectionEdges]
}

type HomeIntroLines {
  line1: String
  line2: String
  line3: String
  line4: String
}

type HomeDoorMessages {
  message1: String
  message2: String
  message3: String
}

type HomeCoreSystemsSkills {
  skill1: String
  skill2: String
  skill3: String
  skill4: String
  skill5: String
}

type HomeCoreSystems {
  title: String
  desc: String
  skills: HomeCoreSystemsSkills
}

type HomeFieldSystemsSkills {
  skill1: String
  skill2: String
  skill3: String
  skill4: String
  skill5: String
}

type HomeFieldSystems {
  title: String
  desc: String
  skills: HomeFieldSystemsSkills
}

type HomeCombinedStatement {
  statement1: String
  statement2: String
}

type HomeProjectSectionProjects {
  image1: String
  url1: String
  image2: String
  url2: String
  image3: String
  url3: String
  image4: String
  url4: String
}

type HomeProjectSectionViewAllLink {
  text: String
  url: String
}

type HomeProjectSection {
  title: String
  projects: [HomeProjectSectionProjects]
  viewAllLink: HomeProjectSectionViewAllLink
}

type HomeQuoteLines {
  line: String
}

type HomeQuoteAttribution {
  signature: String
  source: String
}

type HomeQuote {
  lines: HomeQuoteLines
  attribution: HomeQuoteAttribution
}

type HomeTimedQuoteQuoteParts {
  text: String
  delay: Float
}

type HomeTimedQuote {
  quoteParts: [HomeTimedQuoteQuoteParts]
}

type HomeContact {
  link: String
  buttonText: String
}

type Home implements Node & Document {
  rotatingWords: [String]
  introLines: HomeIntroLines
  doorMessages: HomeDoorMessages
  coreSystems: HomeCoreSystems
  fieldSystems: HomeFieldSystems
  combinedStatement: HomeCombinedStatement
  projectSection: HomeProjectSection
  quote: HomeQuote
  timedQuote: HomeTimedQuote
  contact: HomeContact
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input HomeIntroLinesFilter {
  line1: StringFilter
  line2: StringFilter
  line3: StringFilter
  line4: StringFilter
}

input HomeDoorMessagesFilter {
  message1: StringFilter
  message2: StringFilter
  message3: StringFilter
}

input HomeCoreSystemsSkillsFilter {
  skill1: StringFilter
  skill2: StringFilter
  skill3: StringFilter
  skill4: StringFilter
  skill5: StringFilter
}

input HomeCoreSystemsFilter {
  title: StringFilter
  desc: StringFilter
  skills: HomeCoreSystemsSkillsFilter
}

input HomeFieldSystemsSkillsFilter {
  skill1: StringFilter
  skill2: StringFilter
  skill3: StringFilter
  skill4: StringFilter
  skill5: StringFilter
}

input HomeFieldSystemsFilter {
  title: StringFilter
  desc: StringFilter
  skills: HomeFieldSystemsSkillsFilter
}

input HomeCombinedStatementFilter {
  statement1: StringFilter
  statement2: StringFilter
}

input HomeProjectSectionProjectsFilter {
  image1: ImageFilter
  url1: StringFilter
  image2: ImageFilter
  url2: StringFilter
  image3: ImageFilter
  url3: StringFilter
  image4: ImageFilter
  url4: StringFilter
}

input HomeProjectSectionViewAllLinkFilter {
  text: StringFilter
  url: StringFilter
}

input HomeProjectSectionFilter {
  title: StringFilter
  projects: HomeProjectSectionProjectsFilter
  viewAllLink: HomeProjectSectionViewAllLinkFilter
}

input HomeQuoteLinesFilter {
  line: StringFilter
}

input HomeQuoteAttributionFilter {
  signature: StringFilter
  source: StringFilter
}

input HomeQuoteFilter {
  lines: HomeQuoteLinesFilter
  attribution: HomeQuoteAttributionFilter
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input HomeTimedQuoteQuotePartsFilter {
  text: StringFilter
  delay: NumberFilter
}

input HomeTimedQuoteFilter {
  quoteParts: HomeTimedQuoteQuotePartsFilter
}

input HomeContactFilter {
  link: StringFilter
  buttonText: StringFilter
}

input HomeFilter {
  rotatingWords: StringFilter
  introLines: HomeIntroLinesFilter
  doorMessages: HomeDoorMessagesFilter
  coreSystems: HomeCoreSystemsFilter
  fieldSystems: HomeFieldSystemsFilter
  combinedStatement: HomeCombinedStatementFilter
  projectSection: HomeProjectSectionFilter
  quote: HomeQuoteFilter
  timedQuote: HomeTimedQuoteFilter
  contact: HomeContactFilter
}

type HomeConnectionEdges {
  cursor: String!
  node: Home
}

type HomeConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [HomeConnectionEdges]
}

type ProjectsProjectsLogofolioMeta {
  title: String
  description: String
  speed: Float
  url: String
}

type ProjectsProjectsLogofolioProjectImages {
  white: String
  black: String
}

type ProjectsProjectsLogofolioProject {
  title: String
  description: String
  images: ProjectsProjectsLogofolioProjectImages
  image: String
}

type ProjectsProjectsLogofolio {
  meta: ProjectsProjectsLogofolioMeta
  project: [ProjectsProjectsLogofolioProject]
}

type ProjectsProjectsAnaRoseMeta {
  title: String
  description: String
  speed: Float
  url: String
}

type ProjectsProjectsAnaRoseProject {
  title: String
  description: String
  image: String
}

type ProjectsProjectsAnaRose {
  meta: ProjectsProjectsAnaRoseMeta
  project: [ProjectsProjectsAnaRoseProject]
}

type ProjectsProjectsQueendomFarmsMeta {
  title: String
  description: String
  speed: Float
  url: String
}

type ProjectsProjectsQueendomFarmsProject {
  title: String
  description: String
  image: String
}

type ProjectsProjectsQueendomFarms {
  meta: ProjectsProjectsQueendomFarmsMeta
  project: [ProjectsProjectsQueendomFarmsProject]
}

type ProjectsProjectsEpicFutureMeta {
  title: String
  description: String
  speed: Float
  url: String
}

type ProjectsProjectsEpicFutureProject {
  title: String
  description: String
  image: String
}

type ProjectsProjectsEpicFuture {
  meta: ProjectsProjectsEpicFutureMeta
  project: [ProjectsProjectsEpicFutureProject]
}

type ProjectsProjectsConsolidatedConstructionSolutionsMeta {
  title: String
  description: String
  speed: Float
  url: String
}

type ProjectsProjectsConsolidatedConstructionSolutionsProject {
  title: String
  description: String
  image: String
}

type ProjectsProjectsConsolidatedConstructionSolutions {
  meta: ProjectsProjectsConsolidatedConstructionSolutionsMeta
  project: [ProjectsProjectsConsolidatedConstructionSolutionsProject]
}

type ProjectsProjectsPerfectlyDifferentMeta {
  title: String
  description: String
  speed: Float
  url: String
}

type ProjectsProjectsPerfectlyDifferentProject {
  title: String
  description: String
  image: String
}

type ProjectsProjectsPerfectlyDifferent {
  meta: ProjectsProjectsPerfectlyDifferentMeta
  project: [ProjectsProjectsPerfectlyDifferentProject]
}

type ProjectsProjects {
  logofolio: ProjectsProjectsLogofolio
  anaRose: ProjectsProjectsAnaRose
  queendomFarms: ProjectsProjectsQueendomFarms
  epicFuture: ProjectsProjectsEpicFuture
  consolidatedConstructionSolutions: ProjectsProjectsConsolidatedConstructionSolutions
  perfectlyDifferent: ProjectsProjectsPerfectlyDifferent
}

type Projects implements Node & Document {
  projects: ProjectsProjects
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ProjectsProjectsLogofolioMetaFilter {
  title: StringFilter
  description: StringFilter
  speed: NumberFilter
  url: StringFilter
}

input ProjectsProjectsLogofolioProjectImagesFilter {
  white: ImageFilter
  black: ImageFilter
}

input ProjectsProjectsLogofolioProjectFilter {
  title: StringFilter
  description: StringFilter
  images: ProjectsProjectsLogofolioProjectImagesFilter
  image: ImageFilter
}

input ProjectsProjectsLogofolioFilter {
  meta: ProjectsProjectsLogofolioMetaFilter
  project: ProjectsProjectsLogofolioProjectFilter
}

input ProjectsProjectsAnaRoseMetaFilter {
  title: StringFilter
  description: StringFilter
  speed: NumberFilter
  url: StringFilter
}

input ProjectsProjectsAnaRoseProjectFilter {
  title: StringFilter
  description: StringFilter
  image: ImageFilter
}

input ProjectsProjectsAnaRoseFilter {
  meta: ProjectsProjectsAnaRoseMetaFilter
  project: ProjectsProjectsAnaRoseProjectFilter
}

input ProjectsProjectsQueendomFarmsMetaFilter {
  title: StringFilter
  description: StringFilter
  speed: NumberFilter
  url: StringFilter
}

input ProjectsProjectsQueendomFarmsProjectFilter {
  title: StringFilter
  description: StringFilter
  image: ImageFilter
}

input ProjectsProjectsQueendomFarmsFilter {
  meta: ProjectsProjectsQueendomFarmsMetaFilter
  project: ProjectsProjectsQueendomFarmsProjectFilter
}

input ProjectsProjectsEpicFutureMetaFilter {
  title: StringFilter
  description: StringFilter
  speed: NumberFilter
  url: StringFilter
}

input ProjectsProjectsEpicFutureProjectFilter {
  title: StringFilter
  description: StringFilter
  image: ImageFilter
}

input ProjectsProjectsEpicFutureFilter {
  meta: ProjectsProjectsEpicFutureMetaFilter
  project: ProjectsProjectsEpicFutureProjectFilter
}

input ProjectsProjectsConsolidatedConstructionSolutionsMetaFilter {
  title: StringFilter
  description: StringFilter
  speed: NumberFilter
  url: StringFilter
}

input ProjectsProjectsConsolidatedConstructionSolutionsProjectFilter {
  title: StringFilter
  description: StringFilter
  image: ImageFilter
}

input ProjectsProjectsConsolidatedConstructionSolutionsFilter {
  meta: ProjectsProjectsConsolidatedConstructionSolutionsMetaFilter
  project: ProjectsProjectsConsolidatedConstructionSolutionsProjectFilter
}

input ProjectsProjectsPerfectlyDifferentMetaFilter {
  title: StringFilter
  description: StringFilter
  speed: NumberFilter
  url: StringFilter
}

input ProjectsProjectsPerfectlyDifferentProjectFilter {
  title: StringFilter
  description: StringFilter
  image: ImageFilter
}

input ProjectsProjectsPerfectlyDifferentFilter {
  meta: ProjectsProjectsPerfectlyDifferentMetaFilter
  project: ProjectsProjectsPerfectlyDifferentProjectFilter
}

input ProjectsProjectsFilter {
  logofolio: ProjectsProjectsLogofolioFilter
  anaRose: ProjectsProjectsAnaRoseFilter
  queendomFarms: ProjectsProjectsQueendomFarmsFilter
  epicFuture: ProjectsProjectsEpicFutureFilter
  consolidatedConstructionSolutions: ProjectsProjectsConsolidatedConstructionSolutionsFilter
  perfectlyDifferent: ProjectsProjectsPerfectlyDifferentFilter
}

input ProjectsFilter {
  projects: ProjectsProjectsFilter
}

type ProjectsConnectionEdges {
  cursor: String!
  node: Projects
}

type ProjectsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ProjectsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateSetting(relativePath: String!, params: SettingMutation!): Setting!
  createSetting(relativePath: String!, params: SettingMutation!): Setting!
  updateNavigation(relativePath: String!, params: NavigationMutation!): Navigation!
  createNavigation(relativePath: String!, params: NavigationMutation!): Navigation!
  updateHome(relativePath: String!, params: HomeMutation!): Home!
  createHome(relativePath: String!, params: HomeMutation!): Home!
  updateProjects(relativePath: String!, params: ProjectsMutation!): Projects!
  createProjects(relativePath: String!, params: ProjectsMutation!): Projects!
}

input DocumentUpdateMutation {
  setting: SettingMutation
  navigation: NavigationMutation
  home: HomeMutation
  projects: ProjectsMutation
  relativePath: String
}

input DocumentMutation {
  setting: SettingMutation
  navigation: NavigationMutation
  home: HomeMutation
  projects: ProjectsMutation
}

input SettingSiteSettingsMutation {
  siteName: String
  siteOwner: String
}

input SettingPreloaderMutation {
  image: String
  alt: String
}

input SettingCompanyLogoMutation {
  image: String
  alt: String
}

input SettingSocialFbMutation {
  title: String
  link: String
}

input SettingSocialIgMutation {
  title: String
  link: String
}

input SettingSocialGithubMutation {
  title: String
  link: String
}

input SettingSocialLinkedinMutation {
  title: String
  link: String
}

input SettingSocialMutation {
  fb: SettingSocialFbMutation
  ig: SettingSocialIgMutation
  github: SettingSocialGithubMutation
  linkedin: SettingSocialLinkedinMutation
}

input SettingMutation {
  siteSettings: SettingSiteSettingsMutation
  preloader: SettingPreloaderMutation
  companyLogo: SettingCompanyLogoMutation
  social: SettingSocialMutation
}

input NavigationNavigationLinksHeadingMutation {
  mainText: String
  subText: String
}

input NavigationNavigationLinksMutation {
  link: String
  heading: NavigationNavigationLinksHeadingMutation
  text: String
}

input NavigationFooterLinksMutation {
  text: String
  url: String
}

input NavigationFooterTextMutation {
  text1: String
  text2: String
}

input NavigationMutation {
  navigationLinks: [NavigationNavigationLinksMutation]
  footerLinks: [NavigationFooterLinksMutation]
  footerText: [NavigationFooterTextMutation]
}

input HomeIntroLinesMutation {
  line1: String
  line2: String
  line3: String
  line4: String
}

input HomeDoorMessagesMutation {
  message1: String
  message2: String
  message3: String
}

input HomeCoreSystemsSkillsMutation {
  skill1: String
  skill2: String
  skill3: String
  skill4: String
  skill5: String
}

input HomeCoreSystemsMutation {
  title: String
  desc: String
  skills: HomeCoreSystemsSkillsMutation
}

input HomeFieldSystemsSkillsMutation {
  skill1: String
  skill2: String
  skill3: String
  skill4: String
  skill5: String
}

input HomeFieldSystemsMutation {
  title: String
  desc: String
  skills: HomeFieldSystemsSkillsMutation
}

input HomeCombinedStatementMutation {
  statement1: String
  statement2: String
}

input HomeProjectSectionProjectsMutation {
  image1: String
  url1: String
  image2: String
  url2: String
  image3: String
  url3: String
  image4: String
  url4: String
}

input HomeProjectSectionViewAllLinkMutation {
  text: String
  url: String
}

input HomeProjectSectionMutation {
  title: String
  projects: [HomeProjectSectionProjectsMutation]
  viewAllLink: HomeProjectSectionViewAllLinkMutation
}

input HomeQuoteLinesMutation {
  line: String
}

input HomeQuoteAttributionMutation {
  signature: String
  source: String
}

input HomeQuoteMutation {
  lines: HomeQuoteLinesMutation
  attribution: HomeQuoteAttributionMutation
}

input HomeTimedQuoteQuotePartsMutation {
  text: String
  delay: Float
}

input HomeTimedQuoteMutation {
  quoteParts: [HomeTimedQuoteQuotePartsMutation]
}

input HomeContactMutation {
  link: String
  buttonText: String
}

input HomeMutation {
  rotatingWords: [String]
  introLines: HomeIntroLinesMutation
  doorMessages: HomeDoorMessagesMutation
  coreSystems: HomeCoreSystemsMutation
  fieldSystems: HomeFieldSystemsMutation
  combinedStatement: HomeCombinedStatementMutation
  projectSection: HomeProjectSectionMutation
  quote: HomeQuoteMutation
  timedQuote: HomeTimedQuoteMutation
  contact: HomeContactMutation
}

input ProjectsProjectsLogofolioMetaMutation {
  title: String
  description: String
  speed: Float
  url: String
}

input ProjectsProjectsLogofolioProjectImagesMutation {
  white: String
  black: String
}

input ProjectsProjectsLogofolioProjectMutation {
  title: String
  description: String
  images: ProjectsProjectsLogofolioProjectImagesMutation
  image: String
}

input ProjectsProjectsLogofolioMutation {
  meta: ProjectsProjectsLogofolioMetaMutation
  project: [ProjectsProjectsLogofolioProjectMutation]
}

input ProjectsProjectsAnaRoseMetaMutation {
  title: String
  description: String
  speed: Float
  url: String
}

input ProjectsProjectsAnaRoseProjectMutation {
  title: String
  description: String
  image: String
}

input ProjectsProjectsAnaRoseMutation {
  meta: ProjectsProjectsAnaRoseMetaMutation
  project: [ProjectsProjectsAnaRoseProjectMutation]
}

input ProjectsProjectsQueendomFarmsMetaMutation {
  title: String
  description: String
  speed: Float
  url: String
}

input ProjectsProjectsQueendomFarmsProjectMutation {
  title: String
  description: String
  image: String
}

input ProjectsProjectsQueendomFarmsMutation {
  meta: ProjectsProjectsQueendomFarmsMetaMutation
  project: [ProjectsProjectsQueendomFarmsProjectMutation]
}

input ProjectsProjectsEpicFutureMetaMutation {
  title: String
  description: String
  speed: Float
  url: String
}

input ProjectsProjectsEpicFutureProjectMutation {
  title: String
  description: String
  image: String
}

input ProjectsProjectsEpicFutureMutation {
  meta: ProjectsProjectsEpicFutureMetaMutation
  project: [ProjectsProjectsEpicFutureProjectMutation]
}

input ProjectsProjectsConsolidatedConstructionSolutionsMetaMutation {
  title: String
  description: String
  speed: Float
  url: String
}

input ProjectsProjectsConsolidatedConstructionSolutionsProjectMutation {
  title: String
  description: String
  image: String
}

input ProjectsProjectsConsolidatedConstructionSolutionsMutation {
  meta: ProjectsProjectsConsolidatedConstructionSolutionsMetaMutation
  project: [ProjectsProjectsConsolidatedConstructionSolutionsProjectMutation]
}

input ProjectsProjectsPerfectlyDifferentMetaMutation {
  title: String
  description: String
  speed: Float
  url: String
}

input ProjectsProjectsPerfectlyDifferentProjectMutation {
  title: String
  description: String
  image: String
}

input ProjectsProjectsPerfectlyDifferentMutation {
  meta: ProjectsProjectsPerfectlyDifferentMetaMutation
  project: [ProjectsProjectsPerfectlyDifferentProjectMutation]
}

input ProjectsProjectsMutation {
  logofolio: ProjectsProjectsLogofolioMutation
  anaRose: ProjectsProjectsAnaRoseMutation
  queendomFarms: ProjectsProjectsQueendomFarmsMutation
  epicFuture: ProjectsProjectsEpicFutureMutation
  consolidatedConstructionSolutions: ProjectsProjectsConsolidatedConstructionSolutionsMutation
  perfectlyDifferent: ProjectsProjectsPerfectlyDifferentMutation
}

input ProjectsMutation {
  projects: ProjectsProjectsMutation
}

schema {
  query: Query
  mutation: Mutation
}
