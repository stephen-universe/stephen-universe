# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  settings(relativePath: String): Settings!
  settingsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SettingsFilter): SettingsConnection!
  navigation(relativePath: String): Navigation!
  navigationConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: NavigationFilter): NavigationConnection!
  footer(relativePath: String): Footer!
  footerConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: FooterFilter): FooterConnection!
  content(relativePath: String): Content!
  contentConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ContentFilter): ContentConnection!
  projects(relativePath: String): Projects!
  projectsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ProjectsFilter): ProjectsConnection!
}

input DocumentFilter {
  settings: SettingsFilter
  navigation: NavigationFilter
  footer: FooterFilter
  content: ContentFilter
  projects: ProjectsFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Settings | Navigation | Footer | Content | Projects | Folder

type SettingsSiteSettings {
  siteName: String
  siteOwner: String
}

type SettingsPreloader {
  image: String
  alt: String
}

type SettingsCompanyLogo {
  image: String
  alt: String
}

type SettingsSocialFb {
  title: String
  link: String
}

type SettingsSocialIg {
  title: String
  link: String
}

type SettingsSocialGithub {
  title: String
  link: String
}

type SettingsSocialLinkedin {
  title: String
  link: String
}

type SettingsSocial {
  fb: SettingsSocialFb
  ig: SettingsSocialIg
  github: SettingsSocialGithub
  linkedin: SettingsSocialLinkedin
}

type Settings implements Node & Document {
  siteSettings: SettingsSiteSettings
  preloader: SettingsPreloader
  companyLogo: SettingsCompanyLogo
  social: SettingsSocial
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input SettingsSiteSettingsFilter {
  siteName: StringFilter
  siteOwner: StringFilter
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input SettingsPreloaderFilter {
  image: ImageFilter
  alt: StringFilter
}

input SettingsCompanyLogoFilter {
  image: ImageFilter
  alt: StringFilter
}

input SettingsSocialFbFilter {
  title: StringFilter
  link: StringFilter
}

input SettingsSocialIgFilter {
  title: StringFilter
  link: StringFilter
}

input SettingsSocialGithubFilter {
  title: StringFilter
  link: StringFilter
}

input SettingsSocialLinkedinFilter {
  title: StringFilter
  link: StringFilter
}

input SettingsSocialFilter {
  fb: SettingsSocialFbFilter
  ig: SettingsSocialIgFilter
  github: SettingsSocialGithubFilter
  linkedin: SettingsSocialLinkedinFilter
}

input SettingsFilter {
  siteSettings: SettingsSiteSettingsFilter
  preloader: SettingsPreloaderFilter
  companyLogo: SettingsCompanyLogoFilter
  social: SettingsSocialFilter
}

type SettingsConnectionEdges {
  cursor: String!
  node: Settings
}

type SettingsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SettingsConnectionEdges]
}

type NavigationNavigationLinksHeading {
  mainText: String
  subText: String
}

type NavigationNavigationLinks {
  link: String
  heading: NavigationNavigationLinksHeading
  text: String
}

type Navigation implements Node & Document {
  navigationLinks: [NavigationNavigationLinks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input NavigationNavigationLinksHeadingFilter {
  mainText: StringFilter
  subText: StringFilter
}

input NavigationNavigationLinksFilter {
  link: StringFilter
  heading: NavigationNavigationLinksHeadingFilter
  text: StringFilter
}

input NavigationFilter {
  navigationLinks: NavigationNavigationLinksFilter
}

type NavigationConnectionEdges {
  cursor: String!
  node: Navigation
}

type NavigationConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [NavigationConnectionEdges]
}

type FooterFooterLinks {
  text: String
  url: String
  className: String
}

type FooterFooterText {
  text1: String
  text2: String
}

type Footer implements Node & Document {
  footerLinks: [FooterFooterLinks]
  footerText: [FooterFooterText]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input FooterFooterLinksFilter {
  text: StringFilter
  url: StringFilter
  className: StringFilter
}

input FooterFooterTextFilter {
  text1: StringFilter
  text2: StringFilter
}

input FooterFilter {
  footerLinks: FooterFooterLinksFilter
  footerText: FooterFooterTextFilter
}

type FooterConnectionEdges {
  cursor: String!
  node: Footer
}

type FooterConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [FooterConnectionEdges]
}

type ContentIntroLines {
  line1: String
  line2: String
  line3: String
  line4: String
}

type ContentDoorMessages {
  message1: String
  message2: String
  message3: String
}

type ContentCoreSystemsSkills {
  skill1: String
  skill2: String
  skill3: String
  skill4: String
  skill5: String
}

type ContentCoreSystems {
  title: String
  desc: String
  skills: ContentCoreSystemsSkills
}

type ContentFieldSystemsSkills {
  skill1: String
  skill2: String
  skill3: String
  skill4: String
  skill5: String
}

type ContentFieldSystems {
  title: String
  desc: String
  skills: ContentFieldSystemsSkills
}

type ContentCombinedStatement {
  statement1: String
  statement2: String
}

type ContentProjectSectionProjects {
  image1: String
  url1: String
  image2: String
  url2: String
  image3: String
  url3: String
  image4: String
  url4: String
}

type ContentProjectSectionViewAllLink {
  text: String
  url: String
}

type ContentProjectSection {
  title: String
  projects: [ContentProjectSectionProjects]
  viewAllLink: ContentProjectSectionViewAllLink
}

type ContentQuoteLines {
  line: String
}

type ContentQuoteAttribution {
  signature: String
  source: String
}

type ContentQuote {
  lines: [ContentQuoteLines]
  attribution: ContentQuoteAttribution
}

type ContentTimedQuoteQuoteParts {
  text: String
  delay: Float
}

type ContentTimedQuote {
  quoteParts: [ContentTimedQuoteQuoteParts]
}

type ContentContact {
  link: String
  buttonText: String
}

type Content implements Node & Document {
  rotatingWords: [String]
  introLines: ContentIntroLines
  doorMessages: ContentDoorMessages
  coreSystems: ContentCoreSystems
  fieldSystems: ContentFieldSystems
  combinedStatement: ContentCombinedStatement
  projectSection: ContentProjectSection
  quote: ContentQuote
  timedQuote: ContentTimedQuote
  contact: ContentContact
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ContentIntroLinesFilter {
  line1: StringFilter
  line2: StringFilter
  line3: StringFilter
  line4: StringFilter
}

input ContentDoorMessagesFilter {
  message1: StringFilter
  message2: StringFilter
  message3: StringFilter
}

input ContentCoreSystemsSkillsFilter {
  skill1: StringFilter
  skill2: StringFilter
  skill3: StringFilter
  skill4: StringFilter
  skill5: StringFilter
}

input ContentCoreSystemsFilter {
  title: StringFilter
  desc: StringFilter
  skills: ContentCoreSystemsSkillsFilter
}

input ContentFieldSystemsSkillsFilter {
  skill1: StringFilter
  skill2: StringFilter
  skill3: StringFilter
  skill4: StringFilter
  skill5: StringFilter
}

input ContentFieldSystemsFilter {
  title: StringFilter
  desc: StringFilter
  skills: ContentFieldSystemsSkillsFilter
}

input ContentCombinedStatementFilter {
  statement1: StringFilter
  statement2: StringFilter
}

input ContentProjectSectionProjectsFilter {
  image1: ImageFilter
  url1: StringFilter
  image2: ImageFilter
  url2: StringFilter
  image3: ImageFilter
  url3: StringFilter
  image4: ImageFilter
  url4: StringFilter
}

input ContentProjectSectionViewAllLinkFilter {
  text: StringFilter
  url: StringFilter
}

input ContentProjectSectionFilter {
  title: StringFilter
  projects: ContentProjectSectionProjectsFilter
  viewAllLink: ContentProjectSectionViewAllLinkFilter
}

input ContentQuoteLinesFilter {
  line: StringFilter
}

input ContentQuoteAttributionFilter {
  signature: StringFilter
  source: StringFilter
}

input ContentQuoteFilter {
  lines: ContentQuoteLinesFilter
  attribution: ContentQuoteAttributionFilter
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input ContentTimedQuoteQuotePartsFilter {
  text: StringFilter
  delay: NumberFilter
}

input ContentTimedQuoteFilter {
  quoteParts: ContentTimedQuoteQuotePartsFilter
}

input ContentContactFilter {
  link: StringFilter
  buttonText: StringFilter
}

input ContentFilter {
  rotatingWords: StringFilter
  introLines: ContentIntroLinesFilter
  doorMessages: ContentDoorMessagesFilter
  coreSystems: ContentCoreSystemsFilter
  fieldSystems: ContentFieldSystemsFilter
  combinedStatement: ContentCombinedStatementFilter
  projectSection: ContentProjectSectionFilter
  quote: ContentQuoteFilter
  timedQuote: ContentTimedQuoteFilter
  contact: ContentContactFilter
}

type ContentConnectionEdges {
  cursor: String!
  node: Content
}

type ContentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ContentConnectionEdges]
}

type ProjectsProjectsLogofolioMeta {
  title: String
  description: String
  speed: Float
  url: String
}

type ProjectsProjectsLogofolioProjectImages {
  white: String
  black: String
}

type ProjectsProjectsLogofolioProject {
  title: String
  description: String
  images: ProjectsProjectsLogofolioProjectImages
  image: String
}

type ProjectsProjectsLogofolio {
  meta: ProjectsProjectsLogofolioMeta
  project: [ProjectsProjectsLogofolioProject]
}

type ProjectsProjectsAnaRoseMeta {
  title: String
  description: String
  speed: Float
  url: String
}

type ProjectsProjectsAnaRoseProject {
  title: String
  description: String
  image: String
}

type ProjectsProjectsAnaRose {
  meta: ProjectsProjectsAnaRoseMeta
  project: [ProjectsProjectsAnaRoseProject]
}

type ProjectsProjectsQueendomFarmsMeta {
  title: String
  description: String
  speed: Float
  url: String
}

type ProjectsProjectsQueendomFarmsProject {
  title: String
  description: String
  image: String
}

type ProjectsProjectsQueendomFarms {
  meta: ProjectsProjectsQueendomFarmsMeta
  project: [ProjectsProjectsQueendomFarmsProject]
}

type ProjectsProjectsEpicFutureMeta {
  title: String
  description: String
  speed: Float
  url: String
}

type ProjectsProjectsEpicFutureProject {
  title: String
  description: String
  image: String
}

type ProjectsProjectsEpicFuture {
  meta: ProjectsProjectsEpicFutureMeta
  project: [ProjectsProjectsEpicFutureProject]
}

type ProjectsProjectsConsolidatedConstructionSolutionsMeta {
  title: String
  description: String
  speed: Float
  url: String
}

type ProjectsProjectsConsolidatedConstructionSolutionsProject {
  title: String
  description: String
  image: String
}

type ProjectsProjectsConsolidatedConstructionSolutions {
  meta: ProjectsProjectsConsolidatedConstructionSolutionsMeta
  project: [ProjectsProjectsConsolidatedConstructionSolutionsProject]
}

type ProjectsProjectsPerfectlyDifferentMeta {
  title: String
  description: String
  speed: Float
  url: String
}

type ProjectsProjectsPerfectlyDifferentProject {
  title: String
  description: String
  image: String
}

type ProjectsProjectsPerfectlyDifferent {
  meta: ProjectsProjectsPerfectlyDifferentMeta
  project: [ProjectsProjectsPerfectlyDifferentProject]
}

type ProjectsProjects {
  logofolio: ProjectsProjectsLogofolio
  anaRose: ProjectsProjectsAnaRose
  queendomFarms: ProjectsProjectsQueendomFarms
  epicFuture: ProjectsProjectsEpicFuture
  consolidatedConstructionSolutions: ProjectsProjectsConsolidatedConstructionSolutions
  perfectlyDifferent: ProjectsProjectsPerfectlyDifferent
}

type Projects implements Node & Document {
  projects: ProjectsProjects
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ProjectsProjectsLogofolioMetaFilter {
  title: StringFilter
  description: StringFilter
  speed: NumberFilter
  url: StringFilter
}

input ProjectsProjectsLogofolioProjectImagesFilter {
  white: ImageFilter
  black: ImageFilter
}

input ProjectsProjectsLogofolioProjectFilter {
  title: StringFilter
  description: StringFilter
  images: ProjectsProjectsLogofolioProjectImagesFilter
  image: ImageFilter
}

input ProjectsProjectsLogofolioFilter {
  meta: ProjectsProjectsLogofolioMetaFilter
  project: ProjectsProjectsLogofolioProjectFilter
}

input ProjectsProjectsAnaRoseMetaFilter {
  title: StringFilter
  description: StringFilter
  speed: NumberFilter
  url: StringFilter
}

input ProjectsProjectsAnaRoseProjectFilter {
  title: StringFilter
  description: StringFilter
  image: ImageFilter
}

input ProjectsProjectsAnaRoseFilter {
  meta: ProjectsProjectsAnaRoseMetaFilter
  project: ProjectsProjectsAnaRoseProjectFilter
}

input ProjectsProjectsQueendomFarmsMetaFilter {
  title: StringFilter
  description: StringFilter
  speed: NumberFilter
  url: StringFilter
}

input ProjectsProjectsQueendomFarmsProjectFilter {
  title: StringFilter
  description: StringFilter
  image: ImageFilter
}

input ProjectsProjectsQueendomFarmsFilter {
  meta: ProjectsProjectsQueendomFarmsMetaFilter
  project: ProjectsProjectsQueendomFarmsProjectFilter
}

input ProjectsProjectsEpicFutureMetaFilter {
  title: StringFilter
  description: StringFilter
  speed: NumberFilter
  url: StringFilter
}

input ProjectsProjectsEpicFutureProjectFilter {
  title: StringFilter
  description: StringFilter
  image: ImageFilter
}

input ProjectsProjectsEpicFutureFilter {
  meta: ProjectsProjectsEpicFutureMetaFilter
  project: ProjectsProjectsEpicFutureProjectFilter
}

input ProjectsProjectsConsolidatedConstructionSolutionsMetaFilter {
  title: StringFilter
  description: StringFilter
  speed: NumberFilter
  url: StringFilter
}

input ProjectsProjectsConsolidatedConstructionSolutionsProjectFilter {
  title: StringFilter
  description: StringFilter
  image: ImageFilter
}

input ProjectsProjectsConsolidatedConstructionSolutionsFilter {
  meta: ProjectsProjectsConsolidatedConstructionSolutionsMetaFilter
  project: ProjectsProjectsConsolidatedConstructionSolutionsProjectFilter
}

input ProjectsProjectsPerfectlyDifferentMetaFilter {
  title: StringFilter
  description: StringFilter
  speed: NumberFilter
  url: StringFilter
}

input ProjectsProjectsPerfectlyDifferentProjectFilter {
  title: StringFilter
  description: StringFilter
  image: ImageFilter
}

input ProjectsProjectsPerfectlyDifferentFilter {
  meta: ProjectsProjectsPerfectlyDifferentMetaFilter
  project: ProjectsProjectsPerfectlyDifferentProjectFilter
}

input ProjectsProjectsFilter {
  logofolio: ProjectsProjectsLogofolioFilter
  anaRose: ProjectsProjectsAnaRoseFilter
  queendomFarms: ProjectsProjectsQueendomFarmsFilter
  epicFuture: ProjectsProjectsEpicFutureFilter
  consolidatedConstructionSolutions: ProjectsProjectsConsolidatedConstructionSolutionsFilter
  perfectlyDifferent: ProjectsProjectsPerfectlyDifferentFilter
}

input ProjectsFilter {
  projects: ProjectsProjectsFilter
}

type ProjectsConnectionEdges {
  cursor: String!
  node: Projects
}

type ProjectsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ProjectsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateSettings(relativePath: String!, params: SettingsMutation!): Settings!
  createSettings(relativePath: String!, params: SettingsMutation!): Settings!
  updateNavigation(relativePath: String!, params: NavigationMutation!): Navigation!
  createNavigation(relativePath: String!, params: NavigationMutation!): Navigation!
  updateFooter(relativePath: String!, params: FooterMutation!): Footer!
  createFooter(relativePath: String!, params: FooterMutation!): Footer!
  updateContent(relativePath: String!, params: ContentMutation!): Content!
  createContent(relativePath: String!, params: ContentMutation!): Content!
  updateProjects(relativePath: String!, params: ProjectsMutation!): Projects!
  createProjects(relativePath: String!, params: ProjectsMutation!): Projects!
}

input DocumentUpdateMutation {
  settings: SettingsMutation
  navigation: NavigationMutation
  footer: FooterMutation
  content: ContentMutation
  projects: ProjectsMutation
  relativePath: String
}

input DocumentMutation {
  settings: SettingsMutation
  navigation: NavigationMutation
  footer: FooterMutation
  content: ContentMutation
  projects: ProjectsMutation
}

input SettingsSiteSettingsMutation {
  siteName: String
  siteOwner: String
}

input SettingsPreloaderMutation {
  image: String
  alt: String
}

input SettingsCompanyLogoMutation {
  image: String
  alt: String
}

input SettingsSocialFbMutation {
  title: String
  link: String
}

input SettingsSocialIgMutation {
  title: String
  link: String
}

input SettingsSocialGithubMutation {
  title: String
  link: String
}

input SettingsSocialLinkedinMutation {
  title: String
  link: String
}

input SettingsSocialMutation {
  fb: SettingsSocialFbMutation
  ig: SettingsSocialIgMutation
  github: SettingsSocialGithubMutation
  linkedin: SettingsSocialLinkedinMutation
}

input SettingsMutation {
  siteSettings: SettingsSiteSettingsMutation
  preloader: SettingsPreloaderMutation
  companyLogo: SettingsCompanyLogoMutation
  social: SettingsSocialMutation
}

input NavigationNavigationLinksHeadingMutation {
  mainText: String
  subText: String
}

input NavigationNavigationLinksMutation {
  link: String
  heading: NavigationNavigationLinksHeadingMutation
  text: String
}

input NavigationMutation {
  navigationLinks: [NavigationNavigationLinksMutation]
}

input FooterFooterLinksMutation {
  text: String
  url: String
  className: String
}

input FooterFooterTextMutation {
  text1: String
  text2: String
}

input FooterMutation {
  footerLinks: [FooterFooterLinksMutation]
  footerText: [FooterFooterTextMutation]
}

input ContentIntroLinesMutation {
  line1: String
  line2: String
  line3: String
  line4: String
}

input ContentDoorMessagesMutation {
  message1: String
  message2: String
  message3: String
}

input ContentCoreSystemsSkillsMutation {
  skill1: String
  skill2: String
  skill3: String
  skill4: String
  skill5: String
}

input ContentCoreSystemsMutation {
  title: String
  desc: String
  skills: ContentCoreSystemsSkillsMutation
}

input ContentFieldSystemsSkillsMutation {
  skill1: String
  skill2: String
  skill3: String
  skill4: String
  skill5: String
}

input ContentFieldSystemsMutation {
  title: String
  desc: String
  skills: ContentFieldSystemsSkillsMutation
}

input ContentCombinedStatementMutation {
  statement1: String
  statement2: String
}

input ContentProjectSectionProjectsMutation {
  image1: String
  url1: String
  image2: String
  url2: String
  image3: String
  url3: String
  image4: String
  url4: String
}

input ContentProjectSectionViewAllLinkMutation {
  text: String
  url: String
}

input ContentProjectSectionMutation {
  title: String
  projects: [ContentProjectSectionProjectsMutation]
  viewAllLink: ContentProjectSectionViewAllLinkMutation
}

input ContentQuoteLinesMutation {
  line: String
}

input ContentQuoteAttributionMutation {
  signature: String
  source: String
}

input ContentQuoteMutation {
  lines: [ContentQuoteLinesMutation]
  attribution: ContentQuoteAttributionMutation
}

input ContentTimedQuoteQuotePartsMutation {
  text: String
  delay: Float
}

input ContentTimedQuoteMutation {
  quoteParts: [ContentTimedQuoteQuotePartsMutation]
}

input ContentContactMutation {
  link: String
  buttonText: String
}

input ContentMutation {
  rotatingWords: [String]
  introLines: ContentIntroLinesMutation
  doorMessages: ContentDoorMessagesMutation
  coreSystems: ContentCoreSystemsMutation
  fieldSystems: ContentFieldSystemsMutation
  combinedStatement: ContentCombinedStatementMutation
  projectSection: ContentProjectSectionMutation
  quote: ContentQuoteMutation
  timedQuote: ContentTimedQuoteMutation
  contact: ContentContactMutation
}

input ProjectsProjectsLogofolioMetaMutation {
  title: String
  description: String
  speed: Float
  url: String
}

input ProjectsProjectsLogofolioProjectImagesMutation {
  white: String
  black: String
}

input ProjectsProjectsLogofolioProjectMutation {
  title: String
  description: String
  images: ProjectsProjectsLogofolioProjectImagesMutation
  image: String
}

input ProjectsProjectsLogofolioMutation {
  meta: ProjectsProjectsLogofolioMetaMutation
  project: [ProjectsProjectsLogofolioProjectMutation]
}

input ProjectsProjectsAnaRoseMetaMutation {
  title: String
  description: String
  speed: Float
  url: String
}

input ProjectsProjectsAnaRoseProjectMutation {
  title: String
  description: String
  image: String
}

input ProjectsProjectsAnaRoseMutation {
  meta: ProjectsProjectsAnaRoseMetaMutation
  project: [ProjectsProjectsAnaRoseProjectMutation]
}

input ProjectsProjectsQueendomFarmsMetaMutation {
  title: String
  description: String
  speed: Float
  url: String
}

input ProjectsProjectsQueendomFarmsProjectMutation {
  title: String
  description: String
  image: String
}

input ProjectsProjectsQueendomFarmsMutation {
  meta: ProjectsProjectsQueendomFarmsMetaMutation
  project: [ProjectsProjectsQueendomFarmsProjectMutation]
}

input ProjectsProjectsEpicFutureMetaMutation {
  title: String
  description: String
  speed: Float
  url: String
}

input ProjectsProjectsEpicFutureProjectMutation {
  title: String
  description: String
  image: String
}

input ProjectsProjectsEpicFutureMutation {
  meta: ProjectsProjectsEpicFutureMetaMutation
  project: [ProjectsProjectsEpicFutureProjectMutation]
}

input ProjectsProjectsConsolidatedConstructionSolutionsMetaMutation {
  title: String
  description: String
  speed: Float
  url: String
}

input ProjectsProjectsConsolidatedConstructionSolutionsProjectMutation {
  title: String
  description: String
  image: String
}

input ProjectsProjectsConsolidatedConstructionSolutionsMutation {
  meta: ProjectsProjectsConsolidatedConstructionSolutionsMetaMutation
  project: [ProjectsProjectsConsolidatedConstructionSolutionsProjectMutation]
}

input ProjectsProjectsPerfectlyDifferentMetaMutation {
  title: String
  description: String
  speed: Float
  url: String
}

input ProjectsProjectsPerfectlyDifferentProjectMutation {
  title: String
  description: String
  image: String
}

input ProjectsProjectsPerfectlyDifferentMutation {
  meta: ProjectsProjectsPerfectlyDifferentMetaMutation
  project: [ProjectsProjectsPerfectlyDifferentProjectMutation]
}

input ProjectsProjectsMutation {
  logofolio: ProjectsProjectsLogofolioMutation
  anaRose: ProjectsProjectsAnaRoseMutation
  queendomFarms: ProjectsProjectsQueendomFarmsMutation
  epicFuture: ProjectsProjectsEpicFutureMutation
  consolidatedConstructionSolutions: ProjectsProjectsConsolidatedConstructionSolutionsMutation
  perfectlyDifferent: ProjectsProjectsPerfectlyDifferentMutation
}

input ProjectsMutation {
  projects: ProjectsProjectsMutation
}

schema {
  query: Query
  mutation: Mutation
}
