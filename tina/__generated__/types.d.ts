//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  settings: Settings;
  settingsConnection: SettingsConnection;
  navigation: Navigation;
  navigationConnection: NavigationConnection;
  footer: Footer;
  footerConnection: FooterConnection;
  content: Content;
  contentConnection: ContentConnection;
  projects: Projects;
  projectsConnection: ProjectsConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QuerySettingsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QuerySettingsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SettingsFilter>;
};


export type QueryNavigationArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNavigationConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<NavigationFilter>;
};


export type QueryFooterArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryFooterConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<FooterFilter>;
};


export type QueryContentArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryContentConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ContentFilter>;
};


export type QueryProjectsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryProjectsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ProjectsFilter>;
};

export type DocumentFilter = {
  settings?: InputMaybe<SettingsFilter>;
  navigation?: InputMaybe<NavigationFilter>;
  footer?: InputMaybe<FooterFilter>;
  content?: InputMaybe<ContentFilter>;
  projects?: InputMaybe<ProjectsFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Settings | Navigation | Footer | Content | Projects | Folder;

export type SettingsSiteSettings = {
  __typename?: 'SettingsSiteSettings';
  siteName?: Maybe<Scalars['String']['output']>;
  siteOwner?: Maybe<Scalars['String']['output']>;
};

export type SettingsPreloader = {
  __typename?: 'SettingsPreloader';
  image?: Maybe<Scalars['String']['output']>;
  alt?: Maybe<Scalars['String']['output']>;
};

export type SettingsCompanyLogo = {
  __typename?: 'SettingsCompanyLogo';
  image?: Maybe<Scalars['String']['output']>;
  alt?: Maybe<Scalars['String']['output']>;
};

export type SettingsSocialFb = {
  __typename?: 'SettingsSocialFb';
  title?: Maybe<Scalars['String']['output']>;
  link?: Maybe<Scalars['String']['output']>;
};

export type SettingsSocialIg = {
  __typename?: 'SettingsSocialIg';
  title?: Maybe<Scalars['String']['output']>;
  link?: Maybe<Scalars['String']['output']>;
};

export type SettingsSocialGithub = {
  __typename?: 'SettingsSocialGithub';
  title?: Maybe<Scalars['String']['output']>;
  link?: Maybe<Scalars['String']['output']>;
};

export type SettingsSocialLinkedin = {
  __typename?: 'SettingsSocialLinkedin';
  title?: Maybe<Scalars['String']['output']>;
  link?: Maybe<Scalars['String']['output']>;
};

export type SettingsSocial = {
  __typename?: 'SettingsSocial';
  fb?: Maybe<SettingsSocialFb>;
  ig?: Maybe<SettingsSocialIg>;
  github?: Maybe<SettingsSocialGithub>;
  linkedin?: Maybe<SettingsSocialLinkedin>;
};

export type Settings = Node & Document & {
  __typename?: 'Settings';
  siteSettings?: Maybe<SettingsSiteSettings>;
  preloader?: Maybe<SettingsPreloader>;
  companyLogo?: Maybe<SettingsCompanyLogo>;
  social?: Maybe<SettingsSocial>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type SettingsSiteSettingsFilter = {
  siteName?: InputMaybe<StringFilter>;
  siteOwner?: InputMaybe<StringFilter>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type SettingsPreloaderFilter = {
  image?: InputMaybe<ImageFilter>;
  alt?: InputMaybe<StringFilter>;
};

export type SettingsCompanyLogoFilter = {
  image?: InputMaybe<ImageFilter>;
  alt?: InputMaybe<StringFilter>;
};

export type SettingsSocialFbFilter = {
  title?: InputMaybe<StringFilter>;
  link?: InputMaybe<StringFilter>;
};

export type SettingsSocialIgFilter = {
  title?: InputMaybe<StringFilter>;
  link?: InputMaybe<StringFilter>;
};

export type SettingsSocialGithubFilter = {
  title?: InputMaybe<StringFilter>;
  link?: InputMaybe<StringFilter>;
};

export type SettingsSocialLinkedinFilter = {
  title?: InputMaybe<StringFilter>;
  link?: InputMaybe<StringFilter>;
};

export type SettingsSocialFilter = {
  fb?: InputMaybe<SettingsSocialFbFilter>;
  ig?: InputMaybe<SettingsSocialIgFilter>;
  github?: InputMaybe<SettingsSocialGithubFilter>;
  linkedin?: InputMaybe<SettingsSocialLinkedinFilter>;
};

export type SettingsFilter = {
  siteSettings?: InputMaybe<SettingsSiteSettingsFilter>;
  preloader?: InputMaybe<SettingsPreloaderFilter>;
  companyLogo?: InputMaybe<SettingsCompanyLogoFilter>;
  social?: InputMaybe<SettingsSocialFilter>;
};

export type SettingsConnectionEdges = {
  __typename?: 'SettingsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Settings>;
};

export type SettingsConnection = Connection & {
  __typename?: 'SettingsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<SettingsConnectionEdges>>>;
};

export type NavigationNavigationLinksHeading = {
  __typename?: 'NavigationNavigationLinksHeading';
  mainText?: Maybe<Scalars['String']['output']>;
  subText?: Maybe<Scalars['String']['output']>;
};

export type NavigationNavigationLinks = {
  __typename?: 'NavigationNavigationLinks';
  link?: Maybe<Scalars['String']['output']>;
  heading?: Maybe<NavigationNavigationLinksHeading>;
  text?: Maybe<Scalars['String']['output']>;
};

export type Navigation = Node & Document & {
  __typename?: 'Navigation';
  navigationLinks?: Maybe<Array<Maybe<NavigationNavigationLinks>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type NavigationNavigationLinksHeadingFilter = {
  mainText?: InputMaybe<StringFilter>;
  subText?: InputMaybe<StringFilter>;
};

export type NavigationNavigationLinksFilter = {
  link?: InputMaybe<StringFilter>;
  heading?: InputMaybe<NavigationNavigationLinksHeadingFilter>;
  text?: InputMaybe<StringFilter>;
};

export type NavigationFilter = {
  navigationLinks?: InputMaybe<NavigationNavigationLinksFilter>;
};

export type NavigationConnectionEdges = {
  __typename?: 'NavigationConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Navigation>;
};

export type NavigationConnection = Connection & {
  __typename?: 'NavigationConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<NavigationConnectionEdges>>>;
};

export type FooterFooterLinks = {
  __typename?: 'FooterFooterLinks';
  text?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
  className?: Maybe<Scalars['String']['output']>;
};

export type FooterFooterText = {
  __typename?: 'FooterFooterText';
  text1?: Maybe<Scalars['String']['output']>;
  text2?: Maybe<Scalars['String']['output']>;
};

export type Footer = Node & Document & {
  __typename?: 'Footer';
  footerLinks?: Maybe<Array<Maybe<FooterFooterLinks>>>;
  footerText?: Maybe<Array<Maybe<FooterFooterText>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type FooterFooterLinksFilter = {
  text?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
  className?: InputMaybe<StringFilter>;
};

export type FooterFooterTextFilter = {
  text1?: InputMaybe<StringFilter>;
  text2?: InputMaybe<StringFilter>;
};

export type FooterFilter = {
  footerLinks?: InputMaybe<FooterFooterLinksFilter>;
  footerText?: InputMaybe<FooterFooterTextFilter>;
};

export type FooterConnectionEdges = {
  __typename?: 'FooterConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Footer>;
};

export type FooterConnection = Connection & {
  __typename?: 'FooterConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<FooterConnectionEdges>>>;
};

export type ContentIntroLines = {
  __typename?: 'ContentIntroLines';
  line1?: Maybe<Scalars['String']['output']>;
  line2?: Maybe<Scalars['String']['output']>;
  line3?: Maybe<Scalars['String']['output']>;
  line4?: Maybe<Scalars['String']['output']>;
};

export type ContentDoorMessages = {
  __typename?: 'ContentDoorMessages';
  message1?: Maybe<Scalars['String']['output']>;
  message2?: Maybe<Scalars['String']['output']>;
  message3?: Maybe<Scalars['String']['output']>;
};

export type ContentCoreSystemsSkills = {
  __typename?: 'ContentCoreSystemsSkills';
  skill1?: Maybe<Scalars['String']['output']>;
  skill2?: Maybe<Scalars['String']['output']>;
  skill3?: Maybe<Scalars['String']['output']>;
  skill4?: Maybe<Scalars['String']['output']>;
  skill5?: Maybe<Scalars['String']['output']>;
};

export type ContentCoreSystems = {
  __typename?: 'ContentCoreSystems';
  title?: Maybe<Scalars['String']['output']>;
  desc?: Maybe<Scalars['String']['output']>;
  skills?: Maybe<ContentCoreSystemsSkills>;
};

export type ContentFieldSystemsSkills = {
  __typename?: 'ContentFieldSystemsSkills';
  skill1?: Maybe<Scalars['String']['output']>;
  skill2?: Maybe<Scalars['String']['output']>;
  skill3?: Maybe<Scalars['String']['output']>;
  skill4?: Maybe<Scalars['String']['output']>;
  skill5?: Maybe<Scalars['String']['output']>;
};

export type ContentFieldSystems = {
  __typename?: 'ContentFieldSystems';
  title?: Maybe<Scalars['String']['output']>;
  desc?: Maybe<Scalars['String']['output']>;
  skills?: Maybe<ContentFieldSystemsSkills>;
};

export type ContentCombinedStatement = {
  __typename?: 'ContentCombinedStatement';
  statement1?: Maybe<Scalars['String']['output']>;
  statement2?: Maybe<Scalars['String']['output']>;
};

export type ContentProjectSectionProjects = {
  __typename?: 'ContentProjectSectionProjects';
  image1?: Maybe<Scalars['String']['output']>;
  url1?: Maybe<Scalars['String']['output']>;
  image2?: Maybe<Scalars['String']['output']>;
  url2?: Maybe<Scalars['String']['output']>;
  image3?: Maybe<Scalars['String']['output']>;
  url3?: Maybe<Scalars['String']['output']>;
  image4?: Maybe<Scalars['String']['output']>;
  url4?: Maybe<Scalars['String']['output']>;
};

export type ContentProjectSectionViewAllLink = {
  __typename?: 'ContentProjectSectionViewAllLink';
  text?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type ContentProjectSection = {
  __typename?: 'ContentProjectSection';
  title?: Maybe<Scalars['String']['output']>;
  projects?: Maybe<Array<Maybe<ContentProjectSectionProjects>>>;
  viewAllLink?: Maybe<ContentProjectSectionViewAllLink>;
};

export type ContentQuoteLines = {
  __typename?: 'ContentQuoteLines';
  line?: Maybe<Scalars['String']['output']>;
};

export type ContentQuoteAttribution = {
  __typename?: 'ContentQuoteAttribution';
  signature?: Maybe<Scalars['String']['output']>;
  source?: Maybe<Scalars['String']['output']>;
};

export type ContentQuote = {
  __typename?: 'ContentQuote';
  lines?: Maybe<Array<Maybe<ContentQuoteLines>>>;
  attribution?: Maybe<ContentQuoteAttribution>;
};

export type ContentTimedQuoteQuoteParts = {
  __typename?: 'ContentTimedQuoteQuoteParts';
  text?: Maybe<Scalars['String']['output']>;
  delay?: Maybe<Scalars['Float']['output']>;
};

export type ContentTimedQuote = {
  __typename?: 'ContentTimedQuote';
  quoteParts?: Maybe<Array<Maybe<ContentTimedQuoteQuoteParts>>>;
};

export type ContentContact = {
  __typename?: 'ContentContact';
  link?: Maybe<Scalars['String']['output']>;
  buttonText?: Maybe<Scalars['String']['output']>;
};

export type Content = Node & Document & {
  __typename?: 'Content';
  rotatingWords?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  introLines?: Maybe<ContentIntroLines>;
  doorMessages?: Maybe<ContentDoorMessages>;
  coreSystems?: Maybe<ContentCoreSystems>;
  fieldSystems?: Maybe<ContentFieldSystems>;
  combinedStatement?: Maybe<ContentCombinedStatement>;
  projectSection?: Maybe<ContentProjectSection>;
  quote?: Maybe<ContentQuote>;
  timedQuote?: Maybe<ContentTimedQuote>;
  contact?: Maybe<ContentContact>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ContentIntroLinesFilter = {
  line1?: InputMaybe<StringFilter>;
  line2?: InputMaybe<StringFilter>;
  line3?: InputMaybe<StringFilter>;
  line4?: InputMaybe<StringFilter>;
};

export type ContentDoorMessagesFilter = {
  message1?: InputMaybe<StringFilter>;
  message2?: InputMaybe<StringFilter>;
  message3?: InputMaybe<StringFilter>;
};

export type ContentCoreSystemsSkillsFilter = {
  skill1?: InputMaybe<StringFilter>;
  skill2?: InputMaybe<StringFilter>;
  skill3?: InputMaybe<StringFilter>;
  skill4?: InputMaybe<StringFilter>;
  skill5?: InputMaybe<StringFilter>;
};

export type ContentCoreSystemsFilter = {
  title?: InputMaybe<StringFilter>;
  desc?: InputMaybe<StringFilter>;
  skills?: InputMaybe<ContentCoreSystemsSkillsFilter>;
};

export type ContentFieldSystemsSkillsFilter = {
  skill1?: InputMaybe<StringFilter>;
  skill2?: InputMaybe<StringFilter>;
  skill3?: InputMaybe<StringFilter>;
  skill4?: InputMaybe<StringFilter>;
  skill5?: InputMaybe<StringFilter>;
};

export type ContentFieldSystemsFilter = {
  title?: InputMaybe<StringFilter>;
  desc?: InputMaybe<StringFilter>;
  skills?: InputMaybe<ContentFieldSystemsSkillsFilter>;
};

export type ContentCombinedStatementFilter = {
  statement1?: InputMaybe<StringFilter>;
  statement2?: InputMaybe<StringFilter>;
};

export type ContentProjectSectionProjectsFilter = {
  image1?: InputMaybe<ImageFilter>;
  url1?: InputMaybe<StringFilter>;
  image2?: InputMaybe<ImageFilter>;
  url2?: InputMaybe<StringFilter>;
  image3?: InputMaybe<ImageFilter>;
  url3?: InputMaybe<StringFilter>;
  image4?: InputMaybe<ImageFilter>;
  url4?: InputMaybe<StringFilter>;
};

export type ContentProjectSectionViewAllLinkFilter = {
  text?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
};

export type ContentProjectSectionFilter = {
  title?: InputMaybe<StringFilter>;
  projects?: InputMaybe<ContentProjectSectionProjectsFilter>;
  viewAllLink?: InputMaybe<ContentProjectSectionViewAllLinkFilter>;
};

export type ContentQuoteLinesFilter = {
  line?: InputMaybe<StringFilter>;
};

export type ContentQuoteAttributionFilter = {
  signature?: InputMaybe<StringFilter>;
  source?: InputMaybe<StringFilter>;
};

export type ContentQuoteFilter = {
  lines?: InputMaybe<ContentQuoteLinesFilter>;
  attribution?: InputMaybe<ContentQuoteAttributionFilter>;
};

export type NumberFilter = {
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  eq?: InputMaybe<Scalars['Float']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
};

export type ContentTimedQuoteQuotePartsFilter = {
  text?: InputMaybe<StringFilter>;
  delay?: InputMaybe<NumberFilter>;
};

export type ContentTimedQuoteFilter = {
  quoteParts?: InputMaybe<ContentTimedQuoteQuotePartsFilter>;
};

export type ContentContactFilter = {
  link?: InputMaybe<StringFilter>;
  buttonText?: InputMaybe<StringFilter>;
};

export type ContentFilter = {
  rotatingWords?: InputMaybe<StringFilter>;
  introLines?: InputMaybe<ContentIntroLinesFilter>;
  doorMessages?: InputMaybe<ContentDoorMessagesFilter>;
  coreSystems?: InputMaybe<ContentCoreSystemsFilter>;
  fieldSystems?: InputMaybe<ContentFieldSystemsFilter>;
  combinedStatement?: InputMaybe<ContentCombinedStatementFilter>;
  projectSection?: InputMaybe<ContentProjectSectionFilter>;
  quote?: InputMaybe<ContentQuoteFilter>;
  timedQuote?: InputMaybe<ContentTimedQuoteFilter>;
  contact?: InputMaybe<ContentContactFilter>;
};

export type ContentConnectionEdges = {
  __typename?: 'ContentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Content>;
};

export type ContentConnection = Connection & {
  __typename?: 'ContentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ContentConnectionEdges>>>;
};

export type ProjectsProjectsLogofolioMeta = {
  __typename?: 'ProjectsProjectsLogofolioMeta';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  speed?: Maybe<Scalars['Float']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type ProjectsProjectsLogofolioProjectImages = {
  __typename?: 'ProjectsProjectsLogofolioProjectImages';
  white?: Maybe<Scalars['String']['output']>;
  black?: Maybe<Scalars['String']['output']>;
};

export type ProjectsProjectsLogofolioProject = {
  __typename?: 'ProjectsProjectsLogofolioProject';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  images?: Maybe<ProjectsProjectsLogofolioProjectImages>;
  image?: Maybe<Scalars['String']['output']>;
};

export type ProjectsProjectsLogofolio = {
  __typename?: 'ProjectsProjectsLogofolio';
  meta?: Maybe<ProjectsProjectsLogofolioMeta>;
  project?: Maybe<Array<Maybe<ProjectsProjectsLogofolioProject>>>;
};

export type ProjectsProjectsAnaRoseMeta = {
  __typename?: 'ProjectsProjectsAnaRoseMeta';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  speed?: Maybe<Scalars['Float']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type ProjectsProjectsAnaRoseProject = {
  __typename?: 'ProjectsProjectsAnaRoseProject';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
};

export type ProjectsProjectsAnaRose = {
  __typename?: 'ProjectsProjectsAnaRose';
  meta?: Maybe<ProjectsProjectsAnaRoseMeta>;
  project?: Maybe<Array<Maybe<ProjectsProjectsAnaRoseProject>>>;
};

export type ProjectsProjectsQueendomFarmsMeta = {
  __typename?: 'ProjectsProjectsQueendomFarmsMeta';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  speed?: Maybe<Scalars['Float']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type ProjectsProjectsQueendomFarmsProject = {
  __typename?: 'ProjectsProjectsQueendomFarmsProject';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
};

export type ProjectsProjectsQueendomFarms = {
  __typename?: 'ProjectsProjectsQueendomFarms';
  meta?: Maybe<ProjectsProjectsQueendomFarmsMeta>;
  project?: Maybe<Array<Maybe<ProjectsProjectsQueendomFarmsProject>>>;
};

export type ProjectsProjectsEpicFutureMeta = {
  __typename?: 'ProjectsProjectsEpicFutureMeta';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  speed?: Maybe<Scalars['Float']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type ProjectsProjectsEpicFutureProject = {
  __typename?: 'ProjectsProjectsEpicFutureProject';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
};

export type ProjectsProjectsEpicFuture = {
  __typename?: 'ProjectsProjectsEpicFuture';
  meta?: Maybe<ProjectsProjectsEpicFutureMeta>;
  project?: Maybe<Array<Maybe<ProjectsProjectsEpicFutureProject>>>;
};

export type ProjectsProjectsConsolidatedConstructionSolutionsMeta = {
  __typename?: 'ProjectsProjectsConsolidatedConstructionSolutionsMeta';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  speed?: Maybe<Scalars['Float']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type ProjectsProjectsConsolidatedConstructionSolutionsProject = {
  __typename?: 'ProjectsProjectsConsolidatedConstructionSolutionsProject';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
};

export type ProjectsProjectsConsolidatedConstructionSolutions = {
  __typename?: 'ProjectsProjectsConsolidatedConstructionSolutions';
  meta?: Maybe<ProjectsProjectsConsolidatedConstructionSolutionsMeta>;
  project?: Maybe<Array<Maybe<ProjectsProjectsConsolidatedConstructionSolutionsProject>>>;
};

export type ProjectsProjectsPerfectlyDifferentMeta = {
  __typename?: 'ProjectsProjectsPerfectlyDifferentMeta';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  speed?: Maybe<Scalars['Float']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type ProjectsProjectsPerfectlyDifferentProject = {
  __typename?: 'ProjectsProjectsPerfectlyDifferentProject';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
};

export type ProjectsProjectsPerfectlyDifferent = {
  __typename?: 'ProjectsProjectsPerfectlyDifferent';
  meta?: Maybe<ProjectsProjectsPerfectlyDifferentMeta>;
  project?: Maybe<Array<Maybe<ProjectsProjectsPerfectlyDifferentProject>>>;
};

export type ProjectsProjects = {
  __typename?: 'ProjectsProjects';
  logofolio?: Maybe<ProjectsProjectsLogofolio>;
  anaRose?: Maybe<ProjectsProjectsAnaRose>;
  queendomFarms?: Maybe<ProjectsProjectsQueendomFarms>;
  epicFuture?: Maybe<ProjectsProjectsEpicFuture>;
  consolidatedConstructionSolutions?: Maybe<ProjectsProjectsConsolidatedConstructionSolutions>;
  perfectlyDifferent?: Maybe<ProjectsProjectsPerfectlyDifferent>;
};

export type Projects = Node & Document & {
  __typename?: 'Projects';
  projects?: Maybe<ProjectsProjects>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ProjectsProjectsLogofolioMetaFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  speed?: InputMaybe<NumberFilter>;
  url?: InputMaybe<StringFilter>;
};

export type ProjectsProjectsLogofolioProjectImagesFilter = {
  white?: InputMaybe<ImageFilter>;
  black?: InputMaybe<ImageFilter>;
};

export type ProjectsProjectsLogofolioProjectFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  images?: InputMaybe<ProjectsProjectsLogofolioProjectImagesFilter>;
  image?: InputMaybe<ImageFilter>;
};

export type ProjectsProjectsLogofolioFilter = {
  meta?: InputMaybe<ProjectsProjectsLogofolioMetaFilter>;
  project?: InputMaybe<ProjectsProjectsLogofolioProjectFilter>;
};

export type ProjectsProjectsAnaRoseMetaFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  speed?: InputMaybe<NumberFilter>;
  url?: InputMaybe<StringFilter>;
};

export type ProjectsProjectsAnaRoseProjectFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
};

export type ProjectsProjectsAnaRoseFilter = {
  meta?: InputMaybe<ProjectsProjectsAnaRoseMetaFilter>;
  project?: InputMaybe<ProjectsProjectsAnaRoseProjectFilter>;
};

export type ProjectsProjectsQueendomFarmsMetaFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  speed?: InputMaybe<NumberFilter>;
  url?: InputMaybe<StringFilter>;
};

export type ProjectsProjectsQueendomFarmsProjectFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
};

export type ProjectsProjectsQueendomFarmsFilter = {
  meta?: InputMaybe<ProjectsProjectsQueendomFarmsMetaFilter>;
  project?: InputMaybe<ProjectsProjectsQueendomFarmsProjectFilter>;
};

export type ProjectsProjectsEpicFutureMetaFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  speed?: InputMaybe<NumberFilter>;
  url?: InputMaybe<StringFilter>;
};

export type ProjectsProjectsEpicFutureProjectFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
};

export type ProjectsProjectsEpicFutureFilter = {
  meta?: InputMaybe<ProjectsProjectsEpicFutureMetaFilter>;
  project?: InputMaybe<ProjectsProjectsEpicFutureProjectFilter>;
};

export type ProjectsProjectsConsolidatedConstructionSolutionsMetaFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  speed?: InputMaybe<NumberFilter>;
  url?: InputMaybe<StringFilter>;
};

export type ProjectsProjectsConsolidatedConstructionSolutionsProjectFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
};

export type ProjectsProjectsConsolidatedConstructionSolutionsFilter = {
  meta?: InputMaybe<ProjectsProjectsConsolidatedConstructionSolutionsMetaFilter>;
  project?: InputMaybe<ProjectsProjectsConsolidatedConstructionSolutionsProjectFilter>;
};

export type ProjectsProjectsPerfectlyDifferentMetaFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  speed?: InputMaybe<NumberFilter>;
  url?: InputMaybe<StringFilter>;
};

export type ProjectsProjectsPerfectlyDifferentProjectFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
};

export type ProjectsProjectsPerfectlyDifferentFilter = {
  meta?: InputMaybe<ProjectsProjectsPerfectlyDifferentMetaFilter>;
  project?: InputMaybe<ProjectsProjectsPerfectlyDifferentProjectFilter>;
};

export type ProjectsProjectsFilter = {
  logofolio?: InputMaybe<ProjectsProjectsLogofolioFilter>;
  anaRose?: InputMaybe<ProjectsProjectsAnaRoseFilter>;
  queendomFarms?: InputMaybe<ProjectsProjectsQueendomFarmsFilter>;
  epicFuture?: InputMaybe<ProjectsProjectsEpicFutureFilter>;
  consolidatedConstructionSolutions?: InputMaybe<ProjectsProjectsConsolidatedConstructionSolutionsFilter>;
  perfectlyDifferent?: InputMaybe<ProjectsProjectsPerfectlyDifferentFilter>;
};

export type ProjectsFilter = {
  projects?: InputMaybe<ProjectsProjectsFilter>;
};

export type ProjectsConnectionEdges = {
  __typename?: 'ProjectsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Projects>;
};

export type ProjectsConnection = Connection & {
  __typename?: 'ProjectsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ProjectsConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateSettings: Settings;
  createSettings: Settings;
  updateNavigation: Navigation;
  createNavigation: Navigation;
  updateFooter: Footer;
  createFooter: Footer;
  updateContent: Content;
  createContent: Content;
  updateProjects: Projects;
  createProjects: Projects;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateSettingsArgs = {
  relativePath: Scalars['String']['input'];
  params: SettingsMutation;
};


export type MutationCreateSettingsArgs = {
  relativePath: Scalars['String']['input'];
  params: SettingsMutation;
};


export type MutationUpdateNavigationArgs = {
  relativePath: Scalars['String']['input'];
  params: NavigationMutation;
};


export type MutationCreateNavigationArgs = {
  relativePath: Scalars['String']['input'];
  params: NavigationMutation;
};


export type MutationUpdateFooterArgs = {
  relativePath: Scalars['String']['input'];
  params: FooterMutation;
};


export type MutationCreateFooterArgs = {
  relativePath: Scalars['String']['input'];
  params: FooterMutation;
};


export type MutationUpdateContentArgs = {
  relativePath: Scalars['String']['input'];
  params: ContentMutation;
};


export type MutationCreateContentArgs = {
  relativePath: Scalars['String']['input'];
  params: ContentMutation;
};


export type MutationUpdateProjectsArgs = {
  relativePath: Scalars['String']['input'];
  params: ProjectsMutation;
};


export type MutationCreateProjectsArgs = {
  relativePath: Scalars['String']['input'];
  params: ProjectsMutation;
};

export type DocumentUpdateMutation = {
  settings?: InputMaybe<SettingsMutation>;
  navigation?: InputMaybe<NavigationMutation>;
  footer?: InputMaybe<FooterMutation>;
  content?: InputMaybe<ContentMutation>;
  projects?: InputMaybe<ProjectsMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  settings?: InputMaybe<SettingsMutation>;
  navigation?: InputMaybe<NavigationMutation>;
  footer?: InputMaybe<FooterMutation>;
  content?: InputMaybe<ContentMutation>;
  projects?: InputMaybe<ProjectsMutation>;
};

export type SettingsSiteSettingsMutation = {
  siteName?: InputMaybe<Scalars['String']['input']>;
  siteOwner?: InputMaybe<Scalars['String']['input']>;
};

export type SettingsPreloaderMutation = {
  image?: InputMaybe<Scalars['String']['input']>;
  alt?: InputMaybe<Scalars['String']['input']>;
};

export type SettingsCompanyLogoMutation = {
  image?: InputMaybe<Scalars['String']['input']>;
  alt?: InputMaybe<Scalars['String']['input']>;
};

export type SettingsSocialFbMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  link?: InputMaybe<Scalars['String']['input']>;
};

export type SettingsSocialIgMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  link?: InputMaybe<Scalars['String']['input']>;
};

export type SettingsSocialGithubMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  link?: InputMaybe<Scalars['String']['input']>;
};

export type SettingsSocialLinkedinMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  link?: InputMaybe<Scalars['String']['input']>;
};

export type SettingsSocialMutation = {
  fb?: InputMaybe<SettingsSocialFbMutation>;
  ig?: InputMaybe<SettingsSocialIgMutation>;
  github?: InputMaybe<SettingsSocialGithubMutation>;
  linkedin?: InputMaybe<SettingsSocialLinkedinMutation>;
};

export type SettingsMutation = {
  siteSettings?: InputMaybe<SettingsSiteSettingsMutation>;
  preloader?: InputMaybe<SettingsPreloaderMutation>;
  companyLogo?: InputMaybe<SettingsCompanyLogoMutation>;
  social?: InputMaybe<SettingsSocialMutation>;
};

export type NavigationNavigationLinksHeadingMutation = {
  mainText?: InputMaybe<Scalars['String']['input']>;
  subText?: InputMaybe<Scalars['String']['input']>;
};

export type NavigationNavigationLinksMutation = {
  link?: InputMaybe<Scalars['String']['input']>;
  heading?: InputMaybe<NavigationNavigationLinksHeadingMutation>;
  text?: InputMaybe<Scalars['String']['input']>;
};

export type NavigationMutation = {
  navigationLinks?: InputMaybe<Array<InputMaybe<NavigationNavigationLinksMutation>>>;
};

export type FooterFooterLinksMutation = {
  text?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  className?: InputMaybe<Scalars['String']['input']>;
};

export type FooterFooterTextMutation = {
  text1?: InputMaybe<Scalars['String']['input']>;
  text2?: InputMaybe<Scalars['String']['input']>;
};

export type FooterMutation = {
  footerLinks?: InputMaybe<Array<InputMaybe<FooterFooterLinksMutation>>>;
  footerText?: InputMaybe<Array<InputMaybe<FooterFooterTextMutation>>>;
};

export type ContentIntroLinesMutation = {
  line1?: InputMaybe<Scalars['String']['input']>;
  line2?: InputMaybe<Scalars['String']['input']>;
  line3?: InputMaybe<Scalars['String']['input']>;
  line4?: InputMaybe<Scalars['String']['input']>;
};

export type ContentDoorMessagesMutation = {
  message1?: InputMaybe<Scalars['String']['input']>;
  message2?: InputMaybe<Scalars['String']['input']>;
  message3?: InputMaybe<Scalars['String']['input']>;
};

export type ContentCoreSystemsSkillsMutation = {
  skill1?: InputMaybe<Scalars['String']['input']>;
  skill2?: InputMaybe<Scalars['String']['input']>;
  skill3?: InputMaybe<Scalars['String']['input']>;
  skill4?: InputMaybe<Scalars['String']['input']>;
  skill5?: InputMaybe<Scalars['String']['input']>;
};

export type ContentCoreSystemsMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  desc?: InputMaybe<Scalars['String']['input']>;
  skills?: InputMaybe<ContentCoreSystemsSkillsMutation>;
};

export type ContentFieldSystemsSkillsMutation = {
  skill1?: InputMaybe<Scalars['String']['input']>;
  skill2?: InputMaybe<Scalars['String']['input']>;
  skill3?: InputMaybe<Scalars['String']['input']>;
  skill4?: InputMaybe<Scalars['String']['input']>;
  skill5?: InputMaybe<Scalars['String']['input']>;
};

export type ContentFieldSystemsMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  desc?: InputMaybe<Scalars['String']['input']>;
  skills?: InputMaybe<ContentFieldSystemsSkillsMutation>;
};

export type ContentCombinedStatementMutation = {
  statement1?: InputMaybe<Scalars['String']['input']>;
  statement2?: InputMaybe<Scalars['String']['input']>;
};

export type ContentProjectSectionProjectsMutation = {
  image1?: InputMaybe<Scalars['String']['input']>;
  url1?: InputMaybe<Scalars['String']['input']>;
  image2?: InputMaybe<Scalars['String']['input']>;
  url2?: InputMaybe<Scalars['String']['input']>;
  image3?: InputMaybe<Scalars['String']['input']>;
  url3?: InputMaybe<Scalars['String']['input']>;
  image4?: InputMaybe<Scalars['String']['input']>;
  url4?: InputMaybe<Scalars['String']['input']>;
};

export type ContentProjectSectionViewAllLinkMutation = {
  text?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type ContentProjectSectionMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  projects?: InputMaybe<Array<InputMaybe<ContentProjectSectionProjectsMutation>>>;
  viewAllLink?: InputMaybe<ContentProjectSectionViewAllLinkMutation>;
};

export type ContentQuoteLinesMutation = {
  line?: InputMaybe<Scalars['String']['input']>;
};

export type ContentQuoteAttributionMutation = {
  signature?: InputMaybe<Scalars['String']['input']>;
  source?: InputMaybe<Scalars['String']['input']>;
};

export type ContentQuoteMutation = {
  lines?: InputMaybe<Array<InputMaybe<ContentQuoteLinesMutation>>>;
  attribution?: InputMaybe<ContentQuoteAttributionMutation>;
};

export type ContentTimedQuoteQuotePartsMutation = {
  text?: InputMaybe<Scalars['String']['input']>;
  delay?: InputMaybe<Scalars['Float']['input']>;
};

export type ContentTimedQuoteMutation = {
  quoteParts?: InputMaybe<Array<InputMaybe<ContentTimedQuoteQuotePartsMutation>>>;
};

export type ContentContactMutation = {
  link?: InputMaybe<Scalars['String']['input']>;
  buttonText?: InputMaybe<Scalars['String']['input']>;
};

export type ContentMutation = {
  rotatingWords?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  introLines?: InputMaybe<ContentIntroLinesMutation>;
  doorMessages?: InputMaybe<ContentDoorMessagesMutation>;
  coreSystems?: InputMaybe<ContentCoreSystemsMutation>;
  fieldSystems?: InputMaybe<ContentFieldSystemsMutation>;
  combinedStatement?: InputMaybe<ContentCombinedStatementMutation>;
  projectSection?: InputMaybe<ContentProjectSectionMutation>;
  quote?: InputMaybe<ContentQuoteMutation>;
  timedQuote?: InputMaybe<ContentTimedQuoteMutation>;
  contact?: InputMaybe<ContentContactMutation>;
};

export type ProjectsProjectsLogofolioMetaMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  speed?: InputMaybe<Scalars['Float']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type ProjectsProjectsLogofolioProjectImagesMutation = {
  white?: InputMaybe<Scalars['String']['input']>;
  black?: InputMaybe<Scalars['String']['input']>;
};

export type ProjectsProjectsLogofolioProjectMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  images?: InputMaybe<ProjectsProjectsLogofolioProjectImagesMutation>;
  image?: InputMaybe<Scalars['String']['input']>;
};

export type ProjectsProjectsLogofolioMutation = {
  meta?: InputMaybe<ProjectsProjectsLogofolioMetaMutation>;
  project?: InputMaybe<Array<InputMaybe<ProjectsProjectsLogofolioProjectMutation>>>;
};

export type ProjectsProjectsAnaRoseMetaMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  speed?: InputMaybe<Scalars['Float']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type ProjectsProjectsAnaRoseProjectMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
};

export type ProjectsProjectsAnaRoseMutation = {
  meta?: InputMaybe<ProjectsProjectsAnaRoseMetaMutation>;
  project?: InputMaybe<Array<InputMaybe<ProjectsProjectsAnaRoseProjectMutation>>>;
};

export type ProjectsProjectsQueendomFarmsMetaMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  speed?: InputMaybe<Scalars['Float']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type ProjectsProjectsQueendomFarmsProjectMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
};

export type ProjectsProjectsQueendomFarmsMutation = {
  meta?: InputMaybe<ProjectsProjectsQueendomFarmsMetaMutation>;
  project?: InputMaybe<Array<InputMaybe<ProjectsProjectsQueendomFarmsProjectMutation>>>;
};

export type ProjectsProjectsEpicFutureMetaMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  speed?: InputMaybe<Scalars['Float']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type ProjectsProjectsEpicFutureProjectMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
};

export type ProjectsProjectsEpicFutureMutation = {
  meta?: InputMaybe<ProjectsProjectsEpicFutureMetaMutation>;
  project?: InputMaybe<Array<InputMaybe<ProjectsProjectsEpicFutureProjectMutation>>>;
};

export type ProjectsProjectsConsolidatedConstructionSolutionsMetaMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  speed?: InputMaybe<Scalars['Float']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type ProjectsProjectsConsolidatedConstructionSolutionsProjectMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
};

export type ProjectsProjectsConsolidatedConstructionSolutionsMutation = {
  meta?: InputMaybe<ProjectsProjectsConsolidatedConstructionSolutionsMetaMutation>;
  project?: InputMaybe<Array<InputMaybe<ProjectsProjectsConsolidatedConstructionSolutionsProjectMutation>>>;
};

export type ProjectsProjectsPerfectlyDifferentMetaMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  speed?: InputMaybe<Scalars['Float']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type ProjectsProjectsPerfectlyDifferentProjectMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
};

export type ProjectsProjectsPerfectlyDifferentMutation = {
  meta?: InputMaybe<ProjectsProjectsPerfectlyDifferentMetaMutation>;
  project?: InputMaybe<Array<InputMaybe<ProjectsProjectsPerfectlyDifferentProjectMutation>>>;
};

export type ProjectsProjectsMutation = {
  logofolio?: InputMaybe<ProjectsProjectsLogofolioMutation>;
  anaRose?: InputMaybe<ProjectsProjectsAnaRoseMutation>;
  queendomFarms?: InputMaybe<ProjectsProjectsQueendomFarmsMutation>;
  epicFuture?: InputMaybe<ProjectsProjectsEpicFutureMutation>;
  consolidatedConstructionSolutions?: InputMaybe<ProjectsProjectsConsolidatedConstructionSolutionsMutation>;
  perfectlyDifferent?: InputMaybe<ProjectsProjectsPerfectlyDifferentMutation>;
};

export type ProjectsMutation = {
  projects?: InputMaybe<ProjectsProjectsMutation>;
};

export type SettingsPartsFragment = { __typename: 'Settings', siteSettings?: { __typename: 'SettingsSiteSettings', siteName?: string | null, siteOwner?: string | null } | null, preloader?: { __typename: 'SettingsPreloader', image?: string | null, alt?: string | null } | null, companyLogo?: { __typename: 'SettingsCompanyLogo', image?: string | null, alt?: string | null } | null, social?: { __typename: 'SettingsSocial', fb?: { __typename: 'SettingsSocialFb', title?: string | null, link?: string | null } | null, ig?: { __typename: 'SettingsSocialIg', title?: string | null, link?: string | null } | null, github?: { __typename: 'SettingsSocialGithub', title?: string | null, link?: string | null } | null, linkedin?: { __typename: 'SettingsSocialLinkedin', title?: string | null, link?: string | null } | null } | null };

export type NavigationPartsFragment = { __typename: 'Navigation', navigationLinks?: Array<{ __typename: 'NavigationNavigationLinks', link?: string | null, text?: string | null, heading?: { __typename: 'NavigationNavigationLinksHeading', mainText?: string | null, subText?: string | null } | null } | null> | null };

export type FooterPartsFragment = { __typename: 'Footer', footerLinks?: Array<{ __typename: 'FooterFooterLinks', text?: string | null, url?: string | null, className?: string | null } | null> | null, footerText?: Array<{ __typename: 'FooterFooterText', text1?: string | null, text2?: string | null } | null> | null };

export type ContentPartsFragment = { __typename: 'Content', rotatingWords?: Array<string | null> | null, introLines?: { __typename: 'ContentIntroLines', line1?: string | null, line2?: string | null, line3?: string | null, line4?: string | null } | null, doorMessages?: { __typename: 'ContentDoorMessages', message1?: string | null, message2?: string | null, message3?: string | null } | null, coreSystems?: { __typename: 'ContentCoreSystems', title?: string | null, desc?: string | null, skills?: { __typename: 'ContentCoreSystemsSkills', skill1?: string | null, skill2?: string | null, skill3?: string | null, skill4?: string | null, skill5?: string | null } | null } | null, fieldSystems?: { __typename: 'ContentFieldSystems', title?: string | null, desc?: string | null, skills?: { __typename: 'ContentFieldSystemsSkills', skill1?: string | null, skill2?: string | null, skill3?: string | null, skill4?: string | null, skill5?: string | null } | null } | null, combinedStatement?: { __typename: 'ContentCombinedStatement', statement1?: string | null, statement2?: string | null } | null, projectSection?: { __typename: 'ContentProjectSection', title?: string | null, projects?: Array<{ __typename: 'ContentProjectSectionProjects', image1?: string | null, url1?: string | null, image2?: string | null, url2?: string | null, image3?: string | null, url3?: string | null, image4?: string | null, url4?: string | null } | null> | null, viewAllLink?: { __typename: 'ContentProjectSectionViewAllLink', text?: string | null, url?: string | null } | null } | null, quote?: { __typename: 'ContentQuote', lines?: Array<{ __typename: 'ContentQuoteLines', line?: string | null } | null> | null, attribution?: { __typename: 'ContentQuoteAttribution', signature?: string | null, source?: string | null } | null } | null, timedQuote?: { __typename: 'ContentTimedQuote', quoteParts?: Array<{ __typename: 'ContentTimedQuoteQuoteParts', text?: string | null, delay?: number | null } | null> | null } | null, contact?: { __typename: 'ContentContact', link?: string | null, buttonText?: string | null } | null };

export type ProjectsPartsFragment = { __typename: 'Projects', projects?: { __typename: 'ProjectsProjects', logofolio?: { __typename: 'ProjectsProjectsLogofolio', meta?: { __typename: 'ProjectsProjectsLogofolioMeta', title?: string | null, description?: string | null, speed?: number | null, url?: string | null } | null, project?: Array<{ __typename: 'ProjectsProjectsLogofolioProject', title?: string | null, description?: string | null, image?: string | null, images?: { __typename: 'ProjectsProjectsLogofolioProjectImages', white?: string | null, black?: string | null } | null } | null> | null } | null, anaRose?: { __typename: 'ProjectsProjectsAnaRose', meta?: { __typename: 'ProjectsProjectsAnaRoseMeta', title?: string | null, description?: string | null, speed?: number | null, url?: string | null } | null, project?: Array<{ __typename: 'ProjectsProjectsAnaRoseProject', title?: string | null, description?: string | null, image?: string | null } | null> | null } | null, queendomFarms?: { __typename: 'ProjectsProjectsQueendomFarms', meta?: { __typename: 'ProjectsProjectsQueendomFarmsMeta', title?: string | null, description?: string | null, speed?: number | null, url?: string | null } | null, project?: Array<{ __typename: 'ProjectsProjectsQueendomFarmsProject', title?: string | null, description?: string | null, image?: string | null } | null> | null } | null, epicFuture?: { __typename: 'ProjectsProjectsEpicFuture', meta?: { __typename: 'ProjectsProjectsEpicFutureMeta', title?: string | null, description?: string | null, speed?: number | null, url?: string | null } | null, project?: Array<{ __typename: 'ProjectsProjectsEpicFutureProject', title?: string | null, description?: string | null, image?: string | null } | null> | null } | null, consolidatedConstructionSolutions?: { __typename: 'ProjectsProjectsConsolidatedConstructionSolutions', meta?: { __typename: 'ProjectsProjectsConsolidatedConstructionSolutionsMeta', title?: string | null, description?: string | null, speed?: number | null, url?: string | null } | null, project?: Array<{ __typename: 'ProjectsProjectsConsolidatedConstructionSolutionsProject', title?: string | null, description?: string | null, image?: string | null } | null> | null } | null, perfectlyDifferent?: { __typename: 'ProjectsProjectsPerfectlyDifferent', meta?: { __typename: 'ProjectsProjectsPerfectlyDifferentMeta', title?: string | null, description?: string | null, speed?: number | null, url?: string | null } | null, project?: Array<{ __typename: 'ProjectsProjectsPerfectlyDifferentProject', title?: string | null, description?: string | null, image?: string | null } | null> | null } | null } | null };

export type SettingsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type SettingsQuery = { __typename?: 'Query', settings: { __typename: 'Settings', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, siteSettings?: { __typename: 'SettingsSiteSettings', siteName?: string | null, siteOwner?: string | null } | null, preloader?: { __typename: 'SettingsPreloader', image?: string | null, alt?: string | null } | null, companyLogo?: { __typename: 'SettingsCompanyLogo', image?: string | null, alt?: string | null } | null, social?: { __typename: 'SettingsSocial', fb?: { __typename: 'SettingsSocialFb', title?: string | null, link?: string | null } | null, ig?: { __typename: 'SettingsSocialIg', title?: string | null, link?: string | null } | null, github?: { __typename: 'SettingsSocialGithub', title?: string | null, link?: string | null } | null, linkedin?: { __typename: 'SettingsSocialLinkedin', title?: string | null, link?: string | null } | null } | null } };

export type SettingsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SettingsFilter>;
}>;


export type SettingsConnectionQuery = { __typename?: 'Query', settingsConnection: { __typename?: 'SettingsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'SettingsConnectionEdges', cursor: string, node?: { __typename: 'Settings', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, siteSettings?: { __typename: 'SettingsSiteSettings', siteName?: string | null, siteOwner?: string | null } | null, preloader?: { __typename: 'SettingsPreloader', image?: string | null, alt?: string | null } | null, companyLogo?: { __typename: 'SettingsCompanyLogo', image?: string | null, alt?: string | null } | null, social?: { __typename: 'SettingsSocial', fb?: { __typename: 'SettingsSocialFb', title?: string | null, link?: string | null } | null, ig?: { __typename: 'SettingsSocialIg', title?: string | null, link?: string | null } | null, github?: { __typename: 'SettingsSocialGithub', title?: string | null, link?: string | null } | null, linkedin?: { __typename: 'SettingsSocialLinkedin', title?: string | null, link?: string | null } | null } | null } | null } | null> | null } };

export type NavigationQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type NavigationQuery = { __typename?: 'Query', navigation: { __typename: 'Navigation', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, navigationLinks?: Array<{ __typename: 'NavigationNavigationLinks', link?: string | null, text?: string | null, heading?: { __typename: 'NavigationNavigationLinksHeading', mainText?: string | null, subText?: string | null } | null } | null> | null } };

export type NavigationConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<NavigationFilter>;
}>;


export type NavigationConnectionQuery = { __typename?: 'Query', navigationConnection: { __typename?: 'NavigationConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'NavigationConnectionEdges', cursor: string, node?: { __typename: 'Navigation', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, navigationLinks?: Array<{ __typename: 'NavigationNavigationLinks', link?: string | null, text?: string | null, heading?: { __typename: 'NavigationNavigationLinksHeading', mainText?: string | null, subText?: string | null } | null } | null> | null } | null } | null> | null } };

export type FooterQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type FooterQuery = { __typename?: 'Query', footer: { __typename: 'Footer', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, footerLinks?: Array<{ __typename: 'FooterFooterLinks', text?: string | null, url?: string | null, className?: string | null } | null> | null, footerText?: Array<{ __typename: 'FooterFooterText', text1?: string | null, text2?: string | null } | null> | null } };

export type FooterConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<FooterFilter>;
}>;


export type FooterConnectionQuery = { __typename?: 'Query', footerConnection: { __typename?: 'FooterConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'FooterConnectionEdges', cursor: string, node?: { __typename: 'Footer', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, footerLinks?: Array<{ __typename: 'FooterFooterLinks', text?: string | null, url?: string | null, className?: string | null } | null> | null, footerText?: Array<{ __typename: 'FooterFooterText', text1?: string | null, text2?: string | null } | null> | null } | null } | null> | null } };

export type ContentQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ContentQuery = { __typename?: 'Query', content: { __typename: 'Content', id: string, rotatingWords?: Array<string | null> | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, introLines?: { __typename: 'ContentIntroLines', line1?: string | null, line2?: string | null, line3?: string | null, line4?: string | null } | null, doorMessages?: { __typename: 'ContentDoorMessages', message1?: string | null, message2?: string | null, message3?: string | null } | null, coreSystems?: { __typename: 'ContentCoreSystems', title?: string | null, desc?: string | null, skills?: { __typename: 'ContentCoreSystemsSkills', skill1?: string | null, skill2?: string | null, skill3?: string | null, skill4?: string | null, skill5?: string | null } | null } | null, fieldSystems?: { __typename: 'ContentFieldSystems', title?: string | null, desc?: string | null, skills?: { __typename: 'ContentFieldSystemsSkills', skill1?: string | null, skill2?: string | null, skill3?: string | null, skill4?: string | null, skill5?: string | null } | null } | null, combinedStatement?: { __typename: 'ContentCombinedStatement', statement1?: string | null, statement2?: string | null } | null, projectSection?: { __typename: 'ContentProjectSection', title?: string | null, projects?: Array<{ __typename: 'ContentProjectSectionProjects', image1?: string | null, url1?: string | null, image2?: string | null, url2?: string | null, image3?: string | null, url3?: string | null, image4?: string | null, url4?: string | null } | null> | null, viewAllLink?: { __typename: 'ContentProjectSectionViewAllLink', text?: string | null, url?: string | null } | null } | null, quote?: { __typename: 'ContentQuote', lines?: Array<{ __typename: 'ContentQuoteLines', line?: string | null } | null> | null, attribution?: { __typename: 'ContentQuoteAttribution', signature?: string | null, source?: string | null } | null } | null, timedQuote?: { __typename: 'ContentTimedQuote', quoteParts?: Array<{ __typename: 'ContentTimedQuoteQuoteParts', text?: string | null, delay?: number | null } | null> | null } | null, contact?: { __typename: 'ContentContact', link?: string | null, buttonText?: string | null } | null } };

export type ContentConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ContentFilter>;
}>;


export type ContentConnectionQuery = { __typename?: 'Query', contentConnection: { __typename?: 'ContentConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ContentConnectionEdges', cursor: string, node?: { __typename: 'Content', id: string, rotatingWords?: Array<string | null> | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, introLines?: { __typename: 'ContentIntroLines', line1?: string | null, line2?: string | null, line3?: string | null, line4?: string | null } | null, doorMessages?: { __typename: 'ContentDoorMessages', message1?: string | null, message2?: string | null, message3?: string | null } | null, coreSystems?: { __typename: 'ContentCoreSystems', title?: string | null, desc?: string | null, skills?: { __typename: 'ContentCoreSystemsSkills', skill1?: string | null, skill2?: string | null, skill3?: string | null, skill4?: string | null, skill5?: string | null } | null } | null, fieldSystems?: { __typename: 'ContentFieldSystems', title?: string | null, desc?: string | null, skills?: { __typename: 'ContentFieldSystemsSkills', skill1?: string | null, skill2?: string | null, skill3?: string | null, skill4?: string | null, skill5?: string | null } | null } | null, combinedStatement?: { __typename: 'ContentCombinedStatement', statement1?: string | null, statement2?: string | null } | null, projectSection?: { __typename: 'ContentProjectSection', title?: string | null, projects?: Array<{ __typename: 'ContentProjectSectionProjects', image1?: string | null, url1?: string | null, image2?: string | null, url2?: string | null, image3?: string | null, url3?: string | null, image4?: string | null, url4?: string | null } | null> | null, viewAllLink?: { __typename: 'ContentProjectSectionViewAllLink', text?: string | null, url?: string | null } | null } | null, quote?: { __typename: 'ContentQuote', lines?: Array<{ __typename: 'ContentQuoteLines', line?: string | null } | null> | null, attribution?: { __typename: 'ContentQuoteAttribution', signature?: string | null, source?: string | null } | null } | null, timedQuote?: { __typename: 'ContentTimedQuote', quoteParts?: Array<{ __typename: 'ContentTimedQuoteQuoteParts', text?: string | null, delay?: number | null } | null> | null } | null, contact?: { __typename: 'ContentContact', link?: string | null, buttonText?: string | null } | null } | null } | null> | null } };

export type ProjectsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ProjectsQuery = { __typename?: 'Query', projects: { __typename: 'Projects', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, projects?: { __typename: 'ProjectsProjects', logofolio?: { __typename: 'ProjectsProjectsLogofolio', meta?: { __typename: 'ProjectsProjectsLogofolioMeta', title?: string | null, description?: string | null, speed?: number | null, url?: string | null } | null, project?: Array<{ __typename: 'ProjectsProjectsLogofolioProject', title?: string | null, description?: string | null, image?: string | null, images?: { __typename: 'ProjectsProjectsLogofolioProjectImages', white?: string | null, black?: string | null } | null } | null> | null } | null, anaRose?: { __typename: 'ProjectsProjectsAnaRose', meta?: { __typename: 'ProjectsProjectsAnaRoseMeta', title?: string | null, description?: string | null, speed?: number | null, url?: string | null } | null, project?: Array<{ __typename: 'ProjectsProjectsAnaRoseProject', title?: string | null, description?: string | null, image?: string | null } | null> | null } | null, queendomFarms?: { __typename: 'ProjectsProjectsQueendomFarms', meta?: { __typename: 'ProjectsProjectsQueendomFarmsMeta', title?: string | null, description?: string | null, speed?: number | null, url?: string | null } | null, project?: Array<{ __typename: 'ProjectsProjectsQueendomFarmsProject', title?: string | null, description?: string | null, image?: string | null } | null> | null } | null, epicFuture?: { __typename: 'ProjectsProjectsEpicFuture', meta?: { __typename: 'ProjectsProjectsEpicFutureMeta', title?: string | null, description?: string | null, speed?: number | null, url?: string | null } | null, project?: Array<{ __typename: 'ProjectsProjectsEpicFutureProject', title?: string | null, description?: string | null, image?: string | null } | null> | null } | null, consolidatedConstructionSolutions?: { __typename: 'ProjectsProjectsConsolidatedConstructionSolutions', meta?: { __typename: 'ProjectsProjectsConsolidatedConstructionSolutionsMeta', title?: string | null, description?: string | null, speed?: number | null, url?: string | null } | null, project?: Array<{ __typename: 'ProjectsProjectsConsolidatedConstructionSolutionsProject', title?: string | null, description?: string | null, image?: string | null } | null> | null } | null, perfectlyDifferent?: { __typename: 'ProjectsProjectsPerfectlyDifferent', meta?: { __typename: 'ProjectsProjectsPerfectlyDifferentMeta', title?: string | null, description?: string | null, speed?: number | null, url?: string | null } | null, project?: Array<{ __typename: 'ProjectsProjectsPerfectlyDifferentProject', title?: string | null, description?: string | null, image?: string | null } | null> | null } | null } | null } };

export type ProjectsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ProjectsFilter>;
}>;


export type ProjectsConnectionQuery = { __typename?: 'Query', projectsConnection: { __typename?: 'ProjectsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ProjectsConnectionEdges', cursor: string, node?: { __typename: 'Projects', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, projects?: { __typename: 'ProjectsProjects', logofolio?: { __typename: 'ProjectsProjectsLogofolio', meta?: { __typename: 'ProjectsProjectsLogofolioMeta', title?: string | null, description?: string | null, speed?: number | null, url?: string | null } | null, project?: Array<{ __typename: 'ProjectsProjectsLogofolioProject', title?: string | null, description?: string | null, image?: string | null, images?: { __typename: 'ProjectsProjectsLogofolioProjectImages', white?: string | null, black?: string | null } | null } | null> | null } | null, anaRose?: { __typename: 'ProjectsProjectsAnaRose', meta?: { __typename: 'ProjectsProjectsAnaRoseMeta', title?: string | null, description?: string | null, speed?: number | null, url?: string | null } | null, project?: Array<{ __typename: 'ProjectsProjectsAnaRoseProject', title?: string | null, description?: string | null, image?: string | null } | null> | null } | null, queendomFarms?: { __typename: 'ProjectsProjectsQueendomFarms', meta?: { __typename: 'ProjectsProjectsQueendomFarmsMeta', title?: string | null, description?: string | null, speed?: number | null, url?: string | null } | null, project?: Array<{ __typename: 'ProjectsProjectsQueendomFarmsProject', title?: string | null, description?: string | null, image?: string | null } | null> | null } | null, epicFuture?: { __typename: 'ProjectsProjectsEpicFuture', meta?: { __typename: 'ProjectsProjectsEpicFutureMeta', title?: string | null, description?: string | null, speed?: number | null, url?: string | null } | null, project?: Array<{ __typename: 'ProjectsProjectsEpicFutureProject', title?: string | null, description?: string | null, image?: string | null } | null> | null } | null, consolidatedConstructionSolutions?: { __typename: 'ProjectsProjectsConsolidatedConstructionSolutions', meta?: { __typename: 'ProjectsProjectsConsolidatedConstructionSolutionsMeta', title?: string | null, description?: string | null, speed?: number | null, url?: string | null } | null, project?: Array<{ __typename: 'ProjectsProjectsConsolidatedConstructionSolutionsProject', title?: string | null, description?: string | null, image?: string | null } | null> | null } | null, perfectlyDifferent?: { __typename: 'ProjectsProjectsPerfectlyDifferent', meta?: { __typename: 'ProjectsProjectsPerfectlyDifferentMeta', title?: string | null, description?: string | null, speed?: number | null, url?: string | null } | null, project?: Array<{ __typename: 'ProjectsProjectsPerfectlyDifferentProject', title?: string | null, description?: string | null, image?: string | null } | null> | null } | null } | null } | null } | null> | null } };

export const SettingsPartsFragmentDoc = gql`
    fragment SettingsParts on Settings {
  __typename
  siteSettings {
    __typename
    siteName
    siteOwner
  }
  preloader {
    __typename
    image
    alt
  }
  companyLogo {
    __typename
    image
    alt
  }
  social {
    __typename
    fb {
      __typename
      title
      link
    }
    ig {
      __typename
      title
      link
    }
    github {
      __typename
      title
      link
    }
    linkedin {
      __typename
      title
      link
    }
  }
}
    `;
export const NavigationPartsFragmentDoc = gql`
    fragment NavigationParts on Navigation {
  __typename
  navigationLinks {
    __typename
    link
    heading {
      __typename
      mainText
      subText
    }
    text
  }
}
    `;
export const FooterPartsFragmentDoc = gql`
    fragment FooterParts on Footer {
  __typename
  footerLinks {
    __typename
    text
    url
    className
  }
  footerText {
    __typename
    text1
    text2
  }
}
    `;
export const ContentPartsFragmentDoc = gql`
    fragment ContentParts on Content {
  __typename
  rotatingWords
  introLines {
    __typename
    line1
    line2
    line3
    line4
  }
  doorMessages {
    __typename
    message1
    message2
    message3
  }
  coreSystems {
    __typename
    title
    desc
    skills {
      __typename
      skill1
      skill2
      skill3
      skill4
      skill5
    }
  }
  fieldSystems {
    __typename
    title
    desc
    skills {
      __typename
      skill1
      skill2
      skill3
      skill4
      skill5
    }
  }
  combinedStatement {
    __typename
    statement1
    statement2
  }
  projectSection {
    __typename
    title
    projects {
      __typename
      image1
      url1
      image2
      url2
      image3
      url3
      image4
      url4
    }
    viewAllLink {
      __typename
      text
      url
    }
  }
  quote {
    __typename
    lines {
      __typename
      line
    }
    attribution {
      __typename
      signature
      source
    }
  }
  timedQuote {
    __typename
    quoteParts {
      __typename
      text
      delay
    }
  }
  contact {
    __typename
    link
    buttonText
  }
}
    `;
export const ProjectsPartsFragmentDoc = gql`
    fragment ProjectsParts on Projects {
  __typename
  projects {
    __typename
    logofolio {
      __typename
      meta {
        __typename
        title
        description
        speed
        url
      }
      project {
        __typename
        title
        description
        images {
          __typename
          white
          black
        }
        image
      }
    }
    anaRose {
      __typename
      meta {
        __typename
        title
        description
        speed
        url
      }
      project {
        __typename
        title
        description
        image
      }
    }
    queendomFarms {
      __typename
      meta {
        __typename
        title
        description
        speed
        url
      }
      project {
        __typename
        title
        description
        image
      }
    }
    epicFuture {
      __typename
      meta {
        __typename
        title
        description
        speed
        url
      }
      project {
        __typename
        title
        description
        image
      }
    }
    consolidatedConstructionSolutions {
      __typename
      meta {
        __typename
        title
        description
        speed
        url
      }
      project {
        __typename
        title
        description
        image
      }
    }
    perfectlyDifferent {
      __typename
      meta {
        __typename
        title
        description
        speed
        url
      }
      project {
        __typename
        title
        description
        image
      }
    }
  }
}
    `;
export const SettingsDocument = gql`
    query settings($relativePath: String!) {
  settings(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...SettingsParts
  }
}
    ${SettingsPartsFragmentDoc}`;
export const SettingsConnectionDocument = gql`
    query settingsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: SettingsFilter) {
  settingsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...SettingsParts
      }
    }
  }
}
    ${SettingsPartsFragmentDoc}`;
export const NavigationDocument = gql`
    query navigation($relativePath: String!) {
  navigation(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...NavigationParts
  }
}
    ${NavigationPartsFragmentDoc}`;
export const NavigationConnectionDocument = gql`
    query navigationConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: NavigationFilter) {
  navigationConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...NavigationParts
      }
    }
  }
}
    ${NavigationPartsFragmentDoc}`;
export const FooterDocument = gql`
    query footer($relativePath: String!) {
  footer(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...FooterParts
  }
}
    ${FooterPartsFragmentDoc}`;
export const FooterConnectionDocument = gql`
    query footerConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: FooterFilter) {
  footerConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...FooterParts
      }
    }
  }
}
    ${FooterPartsFragmentDoc}`;
export const ContentDocument = gql`
    query content($relativePath: String!) {
  content(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ContentParts
  }
}
    ${ContentPartsFragmentDoc}`;
export const ContentConnectionDocument = gql`
    query contentConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ContentFilter) {
  contentConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ContentParts
      }
    }
  }
}
    ${ContentPartsFragmentDoc}`;
export const ProjectsDocument = gql`
    query projects($relativePath: String!) {
  projects(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ProjectsParts
  }
}
    ${ProjectsPartsFragmentDoc}`;
export const ProjectsConnectionDocument = gql`
    query projectsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ProjectsFilter) {
  projectsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ProjectsParts
      }
    }
  }
}
    ${ProjectsPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      settings(variables: SettingsQueryVariables, options?: C): Promise<{data: SettingsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SettingsQueryVariables, query: string}> {
        return requester<{data: SettingsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SettingsQueryVariables, query: string}, SettingsQueryVariables>(SettingsDocument, variables, options);
      },
    settingsConnection(variables?: SettingsConnectionQueryVariables, options?: C): Promise<{data: SettingsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SettingsConnectionQueryVariables, query: string}> {
        return requester<{data: SettingsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SettingsConnectionQueryVariables, query: string}, SettingsConnectionQueryVariables>(SettingsConnectionDocument, variables, options);
      },
    navigation(variables: NavigationQueryVariables, options?: C): Promise<{data: NavigationQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: NavigationQueryVariables, query: string}> {
        return requester<{data: NavigationQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: NavigationQueryVariables, query: string}, NavigationQueryVariables>(NavigationDocument, variables, options);
      },
    navigationConnection(variables?: NavigationConnectionQueryVariables, options?: C): Promise<{data: NavigationConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: NavigationConnectionQueryVariables, query: string}> {
        return requester<{data: NavigationConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: NavigationConnectionQueryVariables, query: string}, NavigationConnectionQueryVariables>(NavigationConnectionDocument, variables, options);
      },
    footer(variables: FooterQueryVariables, options?: C): Promise<{data: FooterQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: FooterQueryVariables, query: string}> {
        return requester<{data: FooterQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: FooterQueryVariables, query: string}, FooterQueryVariables>(FooterDocument, variables, options);
      },
    footerConnection(variables?: FooterConnectionQueryVariables, options?: C): Promise<{data: FooterConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: FooterConnectionQueryVariables, query: string}> {
        return requester<{data: FooterConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: FooterConnectionQueryVariables, query: string}, FooterConnectionQueryVariables>(FooterConnectionDocument, variables, options);
      },
    content(variables: ContentQueryVariables, options?: C): Promise<{data: ContentQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContentQueryVariables, query: string}> {
        return requester<{data: ContentQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContentQueryVariables, query: string}, ContentQueryVariables>(ContentDocument, variables, options);
      },
    contentConnection(variables?: ContentConnectionQueryVariables, options?: C): Promise<{data: ContentConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContentConnectionQueryVariables, query: string}> {
        return requester<{data: ContentConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContentConnectionQueryVariables, query: string}, ContentConnectionQueryVariables>(ContentConnectionDocument, variables, options);
      },
    projects(variables: ProjectsQueryVariables, options?: C): Promise<{data: ProjectsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ProjectsQueryVariables, query: string}> {
        return requester<{data: ProjectsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ProjectsQueryVariables, query: string}, ProjectsQueryVariables>(ProjectsDocument, variables, options);
      },
    projectsConnection(variables?: ProjectsConnectionQueryVariables, options?: C): Promise<{data: ProjectsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ProjectsConnectionQueryVariables, query: string}> {
        return requester<{data: ProjectsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ProjectsConnectionQueryVariables, query: string}, ProjectsConnectionQueryVariables>(ProjectsConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  